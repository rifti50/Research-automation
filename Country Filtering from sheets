{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11471771,"sourceType":"datasetVersion","datasetId":7189317}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-19T09:43:40.972802Z","iopub.execute_input":"2025-04-19T09:43:40.973039Z","iopub.status.idle":"2025-04-19T09:43:42.780433Z","shell.execute_reply.started":"2025-04-19T09:43:40.973017Z","shell.execute_reply":"2025-04-19T09:43:42.779487Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/adjusted-net-saving-raw/Adjusted_net_saving_2010_2019 (Raw).xlsx\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Extract all countries' names, excluding those with null values.\nIdentify countries per sheet, excluding those with null values.\n\nList countries with null values.","metadata":{}},{"cell_type":"markdown","source":"## Approach 1","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom collections import defaultdict\n\n# Load the Excel file\n# Replace 'Adjusted_net_saving_2010_2019 (Raw).xlsx' with the path to your Excel file\nexcel_file = '/kaggle/input/adjusted-net-saving-raw/Adjusted_net_saving_2010_2019 (Raw).xlsx'\n\n# Step 1: Get all sheets and initialize storage\nall_countries = set()  # To store all countries with non-null values\ncountries_per_sheet = defaultdict(set)  # To store countries per sheet\ncountries_with_nulls = set()  # To store countries with any null values\n\n# Read all sheets\ntry:\n    xl = pd.ExcelFile(excel_file)\n    sheet_names = xl.sheet_names\nexcept Exception as e:\n    print(f\"Error reading Excel file: {e}\")\n    exit(1)\n\n# Process each sheet\nfor sheet_name in sheet_names:\n    try:\n        # Read the sheet into a DataFrame\n        df = pd.read_excel(excel_file, sheet_name=sheet_name)\n        \n        # Ensure the expected columns exist\n        if not {'country', 'Adjusted net savings, excluding particulate emission damage (% of GNI)', 'year'}.issubset(df.columns):\n            print(f\"Skipping sheet '{sheet_name}': Required columns not found.\")\n            continue\n        \n        # Group by country to check for null values\n        for country, group in df.groupby('country'):\n            # Check if the country has any non-null values in the savings column\n            savings = group['Adjusted net savings, excluding particulate emission damage (% of GNI)']\n            \n            if savings.notna().any():\n                # Add to all_countries if it has at least one non-null value\n                all_countries.add(country)\n                # Add to countries_per_sheet for this sheet\n                countries_per_sheet[sheet_name].add(country)\n            \n            if savings.isna().any():\n                # Add to countries_with_nulls if it has any null values\n                countries_with_nulls.add(country)\n                \n    except Exception as e:\n        print(f\"Error processing sheet '{sheet_name}': {e}\")\n        continue\n\n# Step 2: Print results\nprint(\"\\n1. All Countries (Excluding Those with Only Null Values):\")\nprint(sorted(all_countries))\nprint(f\"Total count: {len(all_countries)}\")\n\nprint(\"\\n2. Countries Per Sheet (Excluding Those with Only Null Values):\")\nfor sheet_name, countries in countries_per_sheet.items():\n    print(f\"\\nSheet: {sheet_name}\")\n    print(sorted(countries))\n    print(f\"Count: {len(countries)}\")\n\nprint(\"\\n3. Countries with Any Null Values:\")\nprint(sorted(countries_with_nulls))\nprint(f\"Total count: {len(countries_with_nulls)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T10:09:36.649875Z","iopub.execute_input":"2025-04-19T10:09:36.650216Z","iopub.status.idle":"2025-04-19T10:09:36.817436Z","shell.execute_reply.started":"2025-04-19T10:09:36.650191Z","shell.execute_reply":"2025-04-19T10:09:36.816309Z"}},"outputs":[{"name":"stdout","text":"\n1. All Countries (Excluding Those with Only Null Values):\n['Albania', 'Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'Serbia', 'Slovak Republic', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'United Kingdom']\nTotal count: 33\n\n2. Countries Per Sheet (Excluding Those with Only Null Values):\n\nSheet: Western Europe\n['Austria', 'Belgium', 'France', 'Germany', 'Ireland', 'Luxembourg', 'Netherlands', 'Switzerland', 'United Kingdom']\nCount: 9\n\nSheet: Northern Europe\n['Denmark', 'Estonia', 'Finland', 'Iceland', 'Latvia', 'Lithuania', 'Norway', 'Sweden']\nCount: 8\n\nSheet: Southern Europe\n['Albania', 'Croatia', 'Cyprus', 'Greece', 'Italy', 'North Macedonia', 'Portugal', 'Serbia', 'Slovenia', 'Spain']\nCount: 10\n\nSheet: Central Europe\n['Austria', 'Czechia', 'Germany', 'Hungary', 'Poland', 'Slovak Republic', 'Slovenia', 'Switzerland']\nCount: 8\n\nSheet: Southeastern Europe\n['Albania', 'Bulgaria', 'Croatia', 'Greece', 'North Macedonia', 'Romania', 'Serbia', 'Slovenia']\nCount: 8\n\n3. Countries with Any Null Values:\n['Bosnia and Herzegovina', 'Montenegro', 'San Marino', 'United Kingdom']\nTotal count: 4\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"## Approach 2","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom collections import defaultdict\n\n# Load the Excel file\n# Replace with the path to your new dataset\nexcel_file = '/kaggle/input/adjusted-net-saving-raw/Adjusted_net_saving_2010_2019 (Raw).xlsx'\n\n# Specify the predictor column to analyze for null values\n# Update this to match the column name in your new dataset (e.g., 'GDP', 'Energy Consumption')\npredictor_column = 'Adjusted net savings, excluding particulate emission damage (% of GNI)'  # Placeholder\n\n# Step 1: Initialize storage\nall_countries = set()  # To store all countries with non-null values\ncountries_per_sheet = defaultdict(set)  # To store countries per sheet with non-null values\ncountries_with_nulls_per_sheet = defaultdict(list)  # To store countries with nulls and their counts per sheet\n\n# Read all sheets\ntry:\n    xl = pd.ExcelFile(excel_file)\n    sheet_names = xl.sheet_names\nexcept Exception as e:\n    print(f\"Error reading Excel file: {e}\")\n    exit(1)\n\n# Process each sheet\nfor sheet_name in sheet_names:\n    try:\n        # Read the sheet into a DataFrame\n        df = pd.read_excel(excel_file, sheet_name=sheet_name)\n        \n        # Ensure the expected columns exist\n        required_columns = {'country', 'year', predictor_column}\n        if not required_columns.issubset(df.columns):\n            print(f\"Skipping sheet '{sheet_name}': Required columns {required_columns} not found.\")\n            continue\n        \n        # Group by country to check for null values\n        for country, group in df.groupby('country'):\n            # Check the predictor column for null values\n            predictor_values = group[predictor_column]\n            \n            # Add to all_countries and countries_per_sheet if there is at least one non-null value\n            if predictor_values.notna().any():\n                all_countries.add(country)\n                countries_per_sheet[sheet_name].add(country)\n            \n            # Count nulls and add to countries_with_nulls_per_sheet if there are any\n            null_count = predictor_values.isna().sum()\n            if null_count > 0:\n                countries_with_nulls_per_sheet[sheet_name].append((country, null_count))\n                \n    except Exception as e:\n        print(f\"Error processing sheet '{sheet_name}': {e}\")\n        continue\n\n# Step 2: Print results\nprint(\"\\n1. All Countries (Excluding Those with Only Null Values):\")\nprint(sorted(all_countries))\nprint(f\"Total count: {len(all_countries)}\")\n\nprint(\"\\n2. Countries Per Sheet (Excluding Those with Only Null Values):\")\nfor sheet_name, countries in countries_per_sheet.items():\n    print(f\"\\nSheet: {sheet_name}\")\n    print(sorted(countries))\n    print(f\"Count: {len(countries)}\")\n\nprint(\"\\n3. Null Counter Per Sheet (Countries with Null Values and Their Null Counts):\")\nfor sheet_name, null_info in countries_with_nulls_per_sheet.items():\n    print(f\"\\nSheet: {sheet_name}\")\n    if null_info:\n        for country, null_count in sorted(null_info):\n            print(f\"  {country}: {null_count} null value(s)\")\n        print(f\"  Total countries with nulls: {len(null_info)}\")\n    else:\n        print(\"  No countries with null values.\")\n\n# Step 3: Aggregate countries with any null values across all sheets\ncountries_with_nulls = set(country for sheet, info in countries_with_nulls_per_sheet.items() for country, _ in info)\nprint(\"\\n4. All Countries with Any Null Values (Across All Sheets):\")\nprint(sorted(countries_with_nulls))\nprint(f\"Total count: {len(countries_with_nulls)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T10:30:10.524000Z","iopub.execute_input":"2025-04-19T10:30:10.524439Z","iopub.status.idle":"2025-04-19T10:30:10.717162Z","shell.execute_reply.started":"2025-04-19T10:30:10.524414Z","shell.execute_reply":"2025-04-19T10:30:10.716403Z"}},"outputs":[{"name":"stdout","text":"\n1. All Countries (Excluding Those with Only Null Values):\n['Albania', 'Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'Serbia', 'Slovak Republic', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'United Kingdom']\nTotal count: 33\n\n2. Countries Per Sheet (Excluding Those with Only Null Values):\n\nSheet: Western Europe\n['Austria', 'Belgium', 'France', 'Germany', 'Ireland', 'Luxembourg', 'Netherlands', 'Switzerland', 'United Kingdom']\nCount: 9\n\nSheet: Northern Europe\n['Denmark', 'Estonia', 'Finland', 'Iceland', 'Latvia', 'Lithuania', 'Norway', 'Sweden']\nCount: 8\n\nSheet: Southern Europe\n['Albania', 'Croatia', 'Cyprus', 'Greece', 'Italy', 'North Macedonia', 'Portugal', 'Serbia', 'Slovenia', 'Spain']\nCount: 10\n\nSheet: Central Europe\n['Austria', 'Czechia', 'Germany', 'Hungary', 'Poland', 'Slovak Republic', 'Slovenia', 'Switzerland']\nCount: 8\n\nSheet: Southeastern Europe\n['Albania', 'Bulgaria', 'Croatia', 'Greece', 'North Macedonia', 'Romania', 'Serbia', 'Slovenia']\nCount: 8\n\n3. Null Counter Per Sheet (Countries with Null Values and Their Null Counts):\n\nSheet: Western Europe\n  United Kingdom: 1 null value(s)\n  Total countries with nulls: 1\n\nSheet: Southern Europe\n  Bosnia and Herzegovina: 10 null value(s)\n  Montenegro: 10 null value(s)\n  San Marino: 10 null value(s)\n  Total countries with nulls: 3\n\nSheet: Southeastern Europe\n  Bosnia and Herzegovina: 10 null value(s)\n  Total countries with nulls: 1\n\n4. All Countries with Any Null Values (Across All Sheets):\n['Bosnia and Herzegovina', 'Montenegro', 'San Marino', 'United Kingdom']\nTotal count: 4\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}