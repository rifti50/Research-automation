{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "116d23c0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:13.687297Z",
     "iopub.status.busy": "2025-05-30T09:59:13.686946Z",
     "iopub.status.idle": "2025-05-30T09:59:15.570798Z",
     "shell.execute_reply": "2025-05-30T09:59:15.569876Z"
    },
    "papermill": {
     "duration": 1.893622,
     "end_time": "2025-05-30T09:59:15.572715",
     "exception": false,
     "start_time": "2025-05-30T09:59:13.679093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e8ae00e",
   "metadata": {
    "papermill": {
     "duration": 0.005505,
     "end_time": "2025-05-30T09:59:15.584263",
     "exception": false,
     "start_time": "2025-05-30T09:59:15.578758",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Install necessary module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "86b5c13a",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:15.596758Z",
     "iopub.status.busy": "2025-05-30T09:59:15.596337Z",
     "iopub.status.idle": "2025-05-30T09:59:35.833271Z",
     "shell.execute_reply": "2025-05-30T09:59:35.831997Z"
    },
    "papermill": {
     "duration": 20.245046,
     "end_time": "2025-05-30T09:59:35.834873",
     "exception": false,
     "start_time": "2025-05-30T09:59:15.589827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting wbdata\r\n",
      "  Downloading wbdata-1.0.0-py3-none-any.whl.metadata (2.6 kB)\r\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.3)\r\n",
      "Collecting appdirs<2.0,>=1.4 (from wbdata)\r\n",
      "  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\r\n",
      "Collecting backoff<3.0.0,>=2.2.1 (from wbdata)\r\n",
      "  Downloading backoff-2.2.1-py3-none-any.whl.metadata (14 kB)\r\n",
      "Requirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\r\n",
      "Collecting dateparser<2.0.0,>=1.2.0 (from wbdata)\r\n",
      "  Downloading dateparser-1.2.1-py3-none-any.whl.metadata (29 kB)\r\n",
      "Collecting decorator<6.0.0,>=5.1.1 (from wbdata)\r\n",
      "  Downloading decorator-5.2.1-py3-none-any.whl.metadata (3.9 kB)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\r\n",
      "Collecting shelved-cache<0.4.0,>=0.3.1 (from wbdata)\r\n",
      "  Downloading shelved_cache-0.3.1-py3-none-any.whl.metadata (4.7 kB)\r\n",
      "Collecting tabulate<0.9.0,>=0.8.5 (from wbdata)\r\n",
      "  Downloading tabulate-0.8.10-py3-none-any.whl.metadata (25 kB)\r\n",
      "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\r\n",
      "Requirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\r\n",
      "Requirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2025.1.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2022.1.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2.4.1)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2022.1.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.23.2->pandas) (1.3.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.23.2->pandas) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.23.2->pandas) (2024.2.0)\r\n",
      "Downloading wbdata-1.0.0-py3-none-any.whl (18 kB)\r\n",
      "Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\r\n",
      "Downloading backoff-2.2.1-py3-none-any.whl (15 kB)\r\n",
      "Downloading dateparser-1.2.1-py3-none-any.whl (295 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.7/295.7 kB\u001b[0m \u001b[31m13.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading decorator-5.2.1-py3-none-any.whl (9.2 kB)\r\n",
      "Downloading shelved_cache-0.3.1-py3-none-any.whl (7.8 kB)\r\n",
      "Downloading tabulate-0.8.10-py3-none-any.whl (29 kB)\r\n",
      "Installing collected packages: appdirs, tabulate, shelved-cache, decorator, backoff, dateparser, wbdata\r\n",
      "  Attempting uninstall: tabulate\r\n",
      "    Found existing installation: tabulate 0.9.0\r\n",
      "    Uninstalling tabulate-0.9.0:\r\n",
      "      Successfully uninstalled tabulate-0.9.0\r\n",
      "  Attempting uninstall: decorator\r\n",
      "    Found existing installation: decorator 4.4.2\r\n",
      "    Uninstalling decorator-4.4.2:\r\n",
      "      Successfully uninstalled decorator-4.4.2\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "moviepy 1.0.3 requires decorator<5.0,>=4.0.2, but you have decorator 5.2.1 which is incompatible.\r\n",
      "bigframes 1.42.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\r\n",
      "bigframes 1.42.0 requires tabulate>=0.9, but you have tabulate 0.8.10 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed appdirs-1.4.4 backoff-2.2.1 dateparser-1.2.1 decorator-5.2.1 shelved-cache-0.3.1 tabulate-0.8.10 wbdata-1.0.0\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install wbdata pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d92918b1",
   "metadata": {
    "papermill": {
     "duration": 0.006599,
     "end_time": "2025-05-30T09:59:35.848774",
     "exception": false,
     "start_time": "2025-05-30T09:59:35.842175",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Fetching just 1 indicator for 46 countries from 1998-2018"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e7873ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:35.866199Z",
     "iopub.status.busy": "2025-05-30T09:59:35.865892Z",
     "iopub.status.idle": "2025-05-30T09:59:41.237101Z",
     "shell.execute_reply": "2025-05-30T09:59:41.235983Z"
    },
    "papermill": {
     "duration": 5.383409,
     "end_time": "2025-05-30T09:59:41.239132",
     "exception": false,
     "start_time": "2025-05-30T09:59:35.855723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wbdata in /usr/local/lib/python3.11/dist-packages (1.0.0)\r\n",
      "Requirement already satisfied: appdirs<2.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.4.4)\r\n",
      "Requirement already satisfied: backoff<3.0.0,>=2.2.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.2.1)\r\n",
      "Requirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\r\n",
      "Requirement already satisfied: dateparser<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.2.1)\r\n",
      "Requirement already satisfied: decorator<6.0.0,>=5.1.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.2.1)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\r\n",
      "Requirement already satisfied: shelved-cache<0.4.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.3.1)\r\n",
      "Requirement already satisfied: tabulate<0.9.0,>=0.8.5 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.8.10)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7.0 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2024.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2025.2)\r\n",
      "Requirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\r\n",
      "Requirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7.0->dateparser<2.0.0,>=1.2.0->wbdata) (1.17.0)\r\n",
      "Fetching data for: GDP growth (annual %)\n",
      "Data saved for: GDP growth (annual %)\n",
      "\n",
      "Data Summary:\n",
      "Total records: 966\n",
      "Countries with data: 46\n",
      "Year range: 1998 - 2018\n",
      "Average GDP growth: 2.97%\n",
      "\n",
      "GDP growth data saved to /kaggle/working/GDP_Growth_1998_2018.xlsx\n",
      "\n",
      "Countries included in the analysis (46 total):\n",
      " 1. ARG\n",
      " 2. AUS\n",
      " 3. AUT\n",
      " 4. BEL\n",
      " 5. BRA\n",
      " 6. BGR\n",
      " 7. CAN\n",
      " 8. CHN\n",
      " 9. CRI\n",
      "10. HRV\n",
      "11. CZE\n",
      "12. DNK\n",
      "13. EST\n",
      "14. FIN\n",
      "15. FRA\n",
      "16. DEU\n",
      "17. GRC\n",
      "18. HUN\n",
      "19. ISL\n",
      "20. IND\n",
      "21. IDN\n",
      "22. IRL\n",
      "23. ISR\n",
      "24. ITA\n",
      "25. JPN\n",
      "26. KOR\n",
      "27. LVA\n",
      "28. LTU\n",
      "29. LUX\n",
      "30. MEX\n",
      "31. NLD\n",
      "32. NZL\n",
      "33. PER\n",
      "34. POL\n",
      "35. PRT\n",
      "36. ROU\n",
      "37. RUS\n",
      "38. SAU\n",
      "39. SVN\n",
      "40. ZAF\n",
      "41. ESP\n",
      "42. SWE\n",
      "43. CHE\n",
      "44. TUR\n",
      "45. GBR\n",
      "46. USA\n"
     ]
    }
   ],
   "source": [
    "# Install wbdata if not already installed\n",
    "!pip install wbdata\n",
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# Define countries with their ISO codes\n",
    "countries = [\n",
    "    'ARG',  # Argentina\n",
    "    'AUS',  # Australia\n",
    "    'AUT',  # Austria\n",
    "    'BEL',  # Belgium\n",
    "    'BRA',  # Brazil\n",
    "    'BGR',  # Bulgaria\n",
    "    'CAN',  # Canada\n",
    "    'CHN',  # China\n",
    "    'CRI',  # Costa Rica\n",
    "    'HRV',  # Croatia\n",
    "    'CZE',  # Czechia\n",
    "    'DNK',  # Denmark\n",
    "    'EST',  # Estonia\n",
    "    'FIN',  # Finland\n",
    "    'FRA',  # France\n",
    "    'DEU',  # Germany\n",
    "    'GRC',  # Greece\n",
    "    'HUN',  # Hungary\n",
    "    'ISL',  # Iceland\n",
    "    'IND',  # India\n",
    "    'IDN',  # Indonesia\n",
    "    'IRL',  # Ireland\n",
    "    'ISR',  # Israel\n",
    "    'ITA',  # Italy\n",
    "    'JPN',  # Japan\n",
    "    'KOR',  # Korea\n",
    "    'LVA',  # Latvia\n",
    "    'LTU',  # Lithuania\n",
    "    'LUX',  # Luxembourg\n",
    "    'MEX',  # Mexico\n",
    "    'NLD',  # Netherlands\n",
    "    'NZL',  # New Zealand\n",
    "    'PER',  # Peru\n",
    "    'POL',  # Poland\n",
    "    'PRT',  # Portugal\n",
    "    'ROU',  # Romania\n",
    "    'RUS',  # Russia\n",
    "    'SAU',  # Saudi Arabia\n",
    "    'SVN',  # Slovenia\n",
    "    'ZAF',  # South Africa\n",
    "    'ESP',  # Spain\n",
    "    'SWE',  # Sweden\n",
    "    'CHE',  # Switzerland\n",
    "    'TUR',  # Türkiye\n",
    "    'GBR',  # United Kingdom\n",
    "    'USA'   # United States\n",
    "]\n",
    "\n",
    "# Define the GDP growth indicator\n",
    "indicator_code = 'NY.GDP.MKTP.KD.ZG'\n",
    "indicator_name = 'GDP growth (annual %)'\n",
    "\n",
    "# Define the start and end years\n",
    "start_date = datetime(1998, 1, 1)\n",
    "end_date = datetime(2018, 12, 31)\n",
    "\n",
    "# Define output file path\n",
    "output_path = \"/kaggle/working/GDP_Growth_1998_2018.xlsx\"\n",
    "\n",
    "print(f\"Fetching data for: {indicator_name}\")\n",
    "\n",
    "try:\n",
    "    # Fetch data for the given countries and indicator\n",
    "    df = wbdata.get_dataframe(\n",
    "        {indicator_code: indicator_name}, \n",
    "        country=countries, \n",
    "        date=(start_date, end_date)\n",
    "    ).reset_index()\n",
    "    \n",
    "    # Check if the dataframe is empty\n",
    "    if df.empty:\n",
    "        print(f\"No data available for {indicator_name}.\")\n",
    "        # Create a dummy dataframe with a message\n",
    "        df = pd.DataFrame({\"Message\": [\"No data available for GDP growth.\"]})\n",
    "        df.to_excel(output_path, sheet_name=\"No Data\", index=False)\n",
    "    else:\n",
    "        # Convert 'date' column to datetime objects if it's not already\n",
    "        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n",
    "            df['date'] = pd.to_datetime(df['date'])\n",
    "            \n",
    "        # Extract only the year\n",
    "        df['year'] = df['date'].dt.year\n",
    "        \n",
    "        # Drop the 'date' column and sort by country and year\n",
    "        df = df.drop(columns=['date']).sort_values(by=['country', 'year'])\n",
    "        \n",
    "        # Save data to Excel file\n",
    "        df.to_excel(output_path, sheet_name='GDP_Growth', index=False)\n",
    "        print(f\"Data saved for: {indicator_name}\")\n",
    "        \n",
    "        # Display basic statistics\n",
    "        print(f\"\\nData Summary:\")\n",
    "        print(f\"Total records: {len(df)}\")\n",
    "        print(f\"Countries with data: {df['country'].nunique()}\")\n",
    "        print(f\"Year range: {df['year'].min()} - {df['year'].max()}\")\n",
    "        print(f\"Average GDP growth: {df[indicator_name].mean():.2f}%\")\n",
    "        \n",
    "except Exception as e:\n",
    "    print(f\"Error fetching data for {indicator_name}: {str(e)}\")\n",
    "    # Create error file\n",
    "    error_df = pd.DataFrame({\"Error\": [f\"Error fetching data: {str(e)}\"]})\n",
    "    error_df.to_excel(output_path, sheet_name=\"Error\", index=False)\n",
    "\n",
    "print(f\"\\nGDP growth data saved to {output_path}\")\n",
    "\n",
    "# Display summary of countries included\n",
    "print(f\"\\nCountries included in the analysis ({len(countries)} total):\")\n",
    "for i, country_code in enumerate(countries, 1):\n",
    "    print(f\"{i:2d}. {country_code}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cd0cffb",
   "metadata": {
    "papermill": {
     "duration": 0.00753,
     "end_time": "2025-05-30T09:59:41.254935",
     "exception": false,
     "start_time": "2025-05-30T09:59:41.247405",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## fetch  8 educational and economic indicators for the OECD and other specified countries from 1998 to 2018 at once in `one` sheets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d6e6a9bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:41.278006Z",
     "iopub.status.busy": "2025-05-30T09:59:41.277321Z",
     "iopub.status.idle": "2025-05-30T09:59:52.822193Z",
     "shell.execute_reply": "2025-05-30T09:59:52.820696Z"
    },
    "papermill": {
     "duration": 11.55724,
     "end_time": "2025-05-30T09:59:52.823756",
     "exception": false,
     "start_time": "2025-05-30T09:59:41.266516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wbdata in /usr/local/lib/python3.11/dist-packages (1.0.0)\r\n",
      "Requirement already satisfied: appdirs<2.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.4.4)\r\n",
      "Requirement already satisfied: backoff<3.0.0,>=2.2.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.2.1)\r\n",
      "Requirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\r\n",
      "Requirement already satisfied: dateparser<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.2.1)\r\n",
      "Requirement already satisfied: decorator<6.0.0,>=5.1.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.2.1)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\r\n",
      "Requirement already satisfied: shelved-cache<0.4.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.3.1)\r\n",
      "Requirement already satisfied: tabulate<0.9.0,>=0.8.5 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.8.10)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7.0 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2024.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2025.2)\r\n",
      "Requirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\r\n",
      "Requirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7.0->dateparser<2.0.0,>=1.2.0->wbdata) (1.17.0)\r\n",
      "Starting data collection...\n",
      "Fetching data for: bachelor_male_education\n",
      "Successfully collected data for: bachelor_male_education\n",
      "Fetching data for: industry_value_added\n",
      "Successfully collected data for: industry_value_added\n",
      "Fetching data for: fdi_net\n",
      "Successfully collected data for: fdi_net\n",
      "Fetching data for: domestic_credit\n",
      "Successfully collected data for: domestic_credit\n",
      "Fetching data for: trade_gdp\n",
      "Successfully collected data for: trade_gdp\n",
      "Fetching data for: labor_advanced_education\n",
      "Successfully collected data for: labor_advanced_education\n",
      "Fetching data for: labor_basic_education\n",
      "Successfully collected data for: labor_basic_education\n",
      "Fetching data for: rd_expenditure\n",
      "Successfully collected data for: rd_expenditure\n",
      "\n",
      "Merging all indicators into panel data format...\n",
      "\n",
      "Panel data successfully saved to /kaggle/working/Panel_Data_Education_Economics_1998_2018.xlsx\n",
      "Data shape: 1092 observations, 11 variables\n",
      "Time period: 1998 - 2018\n",
      "Number of countries: 52\n",
      "\n",
      "Sample of the panel data:\n",
      "   country_id    country  year  bachelor_male_education  industry_value_added  \\\n",
      "0         NaN  Argentina  1998                      NaN             26.712136   \n",
      "1         NaN  Australia  1998                      NaN             25.360804   \n",
      "2         NaN    Austria  1998                      NaN             28.834967   \n",
      "3         NaN    Belgium  1998                      NaN             25.570685   \n",
      "4         NaN     Brazil  1998                      NaN             22.118790   \n",
      "5         NaN   Bulgaria  1998                      NaN             21.289195   \n",
      "6         NaN     Canada  1998                      NaN             26.833869   \n",
      "7         NaN      Chile  1998                      NaN             27.329720   \n",
      "8         NaN      China  1998                      NaN             45.797636   \n",
      "9         NaN   Colombia  1998                      NaN             26.392292   \n",
      "\n",
      "        fdi_net  domestic_credit   trade_gdp  labor_advanced_education  \\\n",
      "0  7.290657e+09        23.590991   23.350028                       NaN   \n",
      "1  7.597611e+09        79.110667   39.992702                       NaN   \n",
      "2  4.571856e+09              NaN   77.349522                    81.405   \n",
      "3  2.269050e+10              NaN  124.709123                    80.253   \n",
      "4  2.885561e+10        29.532261   16.438585                    85.755   \n",
      "5  5.373173e+08         8.939791   77.045203                       NaN   \n",
      "6  2.497921e+10        79.862540   78.081185                    78.794   \n",
      "7  4.627818e+09        55.420664   53.836179                    87.390   \n",
      "8  4.564400e+10       105.071351   32.424140                       NaN   \n",
      "9  2.828826e+09        34.835025   35.908923                       NaN   \n",
      "\n",
      "   labor_basic_education  rd_expenditure  \n",
      "0                    NaN         0.41131  \n",
      "1                    NaN         1.51351  \n",
      "2                 38.362         1.73155  \n",
      "3                 32.951         1.83825  \n",
      "4                 65.972             NaN  \n",
      "5                    NaN         0.48223  \n",
      "6                 50.729         1.71051  \n",
      "7                 48.482             NaN  \n",
      "8                    NaN         0.64689  \n",
      "9                    NaN             NaN  \n",
      "\n",
      "Data availability summary:\n",
      "bachelor_male_education: 377/1092 (34.5%) observations available\n",
      "industry_value_added: 1092/1092 (100.0%) observations available\n",
      "fdi_net: 1088/1092 (99.6%) observations available\n",
      "domestic_credit: 970/1092 (88.8%) observations available\n",
      "trade_gdp: 1092/1092 (100.0%) observations available\n",
      "labor_advanced_education: 920/1092 (84.2%) observations available\n",
      "labor_basic_education: 923/1092 (84.5%) observations available\n",
      "rd_expenditure: 986/1092 (90.3%) observations available\n",
      "\n",
      "Countries included in the analysis:\n",
      "ID  1: AUS\n",
      "ID  2: AUT\n",
      "ID  3: BEL\n",
      "ID  4: CAN\n",
      "ID  5: CHL\n",
      "ID  6: COL\n",
      "ID  7: CRI\n",
      "ID  8: CZE\n",
      "ID  9: DNK\n",
      "ID 10: EST\n",
      "ID 11: FIN\n",
      "ID 12: FRA\n",
      "ID 13: DEU\n",
      "ID 14: GRC\n",
      "ID 15: HUN\n",
      "ID 16: ISL\n",
      "ID 17: IRL\n",
      "ID 18: ISR\n",
      "ID 19: ITA\n",
      "ID 20: JPN\n",
      "ID 21: KOR\n",
      "ID 22: LVA\n",
      "ID 23: LTU\n",
      "ID 24: LUX\n",
      "ID 25: MEX\n",
      "ID 26: NLD\n",
      "ID 27: NZL\n",
      "ID 28: NOR\n",
      "ID 29: POL\n",
      "ID 30: PRT\n",
      "ID 31: SVK\n",
      "ID 32: SVN\n",
      "ID 33: ESP\n",
      "ID 34: SWE\n",
      "ID 35: CHE\n",
      "ID 36: TUR\n",
      "ID 37: GBR\n",
      "ID 38: USA\n",
      "ID 39: ARG\n",
      "ID 40: BRA\n",
      "ID 41: BGR\n",
      "ID 42: CHN\n",
      "ID 43: HRV\n",
      "ID 44: CYP\n",
      "ID 45: IND\n",
      "ID 46: IDN\n",
      "ID 47: MLT\n",
      "ID 48: PER\n",
      "ID 49: ROU\n",
      "ID 50: RUS\n",
      "ID 51: SAU\n",
      "ID 52: ZAF\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "# Install wbdata if not already installed\n",
    "!pip install wbdata\n",
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# Define countries with their ISO codes\n",
    "countries = [\n",
    "    'AUS',  # Australia\n",
    "    'AUT',  # Austria\n",
    "    'BEL',  # Belgium\n",
    "    'CAN',  # Canada\n",
    "    'CHL',  # Chile\n",
    "    'COL',  # Colombia\n",
    "    'CRI',  # Costa Rica\n",
    "    'CZE',  # Czechia\n",
    "    'DNK',  # Denmark\n",
    "    'EST',  # Estonia\n",
    "    'FIN',  # Finland\n",
    "    'FRA',  # France\n",
    "    'DEU',  # Germany\n",
    "    'GRC',  # Greece\n",
    "    'HUN',  # Hungary\n",
    "    'ISL',  # Iceland\n",
    "    'IRL',  # Ireland\n",
    "    'ISR',  # Israel\n",
    "    'ITA',  # Italy\n",
    "    'JPN',  # Japan\n",
    "    'KOR',  # Korea\n",
    "    'LVA',  # Latvia\n",
    "    'LTU',  # Lithuania\n",
    "    'LUX',  # Luxembourg\n",
    "    'MEX',  # Mexico\n",
    "    'NLD',  # Netherlands\n",
    "    'NZL',  # New Zealand\n",
    "    'NOR',  # Norway\n",
    "    'POL',  # Poland\n",
    "    'PRT',  # Portugal\n",
    "    'SVK',  # Slovak Republic\n",
    "    'SVN',  # Slovenia\n",
    "    'ESP',  # Spain\n",
    "    'SWE',  # Sweden\n",
    "    'CHE',  # Switzerland\n",
    "    'TUR',  # Türkiye\n",
    "    'GBR',  # United Kingdom\n",
    "    'USA',  # United States\n",
    "    'ARG',  # Argentina\n",
    "    'BRA',  # Brazil\n",
    "    'BGR',  # Bulgaria\n",
    "    'CHN',  # China (People's Republic of)\n",
    "    'HRV',  # Croatia\n",
    "    'CYP',  # Cyprus\n",
    "    'IND',  # India\n",
    "    'IDN',  # Indonesia\n",
    "    'MLT',  # Malta\n",
    "    'PER',  # Peru\n",
    "    'ROU',  # Romania\n",
    "    'RUS',  # Russia\n",
    "    'SAU',  # Saudi Arabia\n",
    "    'ZAF'   # South Africa\n",
    "]\n",
    "\n",
    "# Create country ID mapping\n",
    "country_id_mapping = {country: i+1 for i, country in enumerate(countries)}\n",
    "\n",
    "# Define indicators with shorter column names for easier analysis\n",
    "indicators = {\n",
    "    'SE.TER.CUAT.BA.MA.ZS': 'bachelor_male_education',\n",
    "    'NV.IND.TOTL.ZS': 'industry_value_added',\n",
    "    'BX.KLT.DINV.CD.WD': 'fdi_net',\n",
    "    'FD.AST.PRVT.GD.ZS': 'domestic_credit',\n",
    "    'NE.TRD.GNFS.ZS': 'trade_gdp',\n",
    "    'SL.TLF.ADVN.ZS': 'labor_advanced_education',\n",
    "    'SL.TLF.BASC.ZS': 'labor_basic_education',\n",
    "    'GB.XPD.RSDV.GD.ZS': 'rd_expenditure'\n",
    "}\n",
    "\n",
    "# Define the start and end years\n",
    "start_date = datetime(1998, 1, 1)\n",
    "end_date = datetime(2018, 12, 31)\n",
    "\n",
    "# Define output file path\n",
    "output_path = \"/kaggle/working/Panel_Data_Education_Economics_1998_2018.xlsx\"\n",
    "\n",
    "print(\"Starting data collection...\")\n",
    "\n",
    "# Initialize an empty list to store all dataframes\n",
    "all_data = []\n",
    "\n",
    "# Fetch data for each indicator\n",
    "for indicator_code, column_name in indicators.items():\n",
    "    print(f\"Fetching data for: {column_name}\")\n",
    "    \n",
    "    try:\n",
    "        # Fetch data for the given countries and indicator\n",
    "        df = wbdata.get_dataframe(\n",
    "            {indicator_code: column_name}, \n",
    "            country=countries, \n",
    "            date=(start_date, end_date)\n",
    "        ).reset_index()\n",
    "        \n",
    "        # If the dataframe is empty, skip this indicator\n",
    "        if df.empty:\n",
    "            print(f\"No data available for {column_name}\")\n",
    "            continue\n",
    "        \n",
    "        # Convert 'date' column to datetime objects if it's not already\n",
    "        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n",
    "            df['date'] = pd.to_datetime(df['date'])\n",
    "            \n",
    "        # Extract only the year\n",
    "        df['year'] = df['date'].dt.year\n",
    "        \n",
    "        # Drop the 'date' column\n",
    "        df = df.drop(columns=['date'])\n",
    "        \n",
    "        # Add this dataframe to our list\n",
    "        all_data.append(df)\n",
    "        print(f\"Successfully collected data for: {column_name}\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"Error fetching data for {column_name}: {str(e)}\")\n",
    "        continue\n",
    "\n",
    "# Merge all dataframes on country and year\n",
    "if all_data:\n",
    "    print(\"\\nMerging all indicators into panel data format...\")\n",
    "    \n",
    "    # Start with the first dataframe\n",
    "    panel_data = all_data[0]\n",
    "    \n",
    "    # Merge with remaining dataframes\n",
    "    for df in all_data[1:]:\n",
    "        panel_data = pd.merge(panel_data, df, on=['country', 'year'], how='outer')\n",
    "    \n",
    "    # Add country ID column\n",
    "    panel_data['country_id'] = panel_data['country'].map(country_id_mapping)\n",
    "    \n",
    "    # Reorder columns to have ID, country, year first, then all indicators\n",
    "    column_order = ['country_id', 'country', 'year'] + [col for col in panel_data.columns if col not in ['country_id', 'country', 'year']]\n",
    "    panel_data = panel_data[column_order]\n",
    "    \n",
    "    # Sort by country ID and year for proper panel data structure\n",
    "    panel_data = panel_data.sort_values(by=['country_id', 'year'])\n",
    "    \n",
    "    # Reset index\n",
    "    panel_data = panel_data.reset_index(drop=True)\n",
    "    \n",
    "    # Save to Excel\n",
    "    with pd.ExcelWriter(output_path) as writer:\n",
    "        panel_data.to_excel(writer, sheet_name='Panel_Data', index=False)\n",
    "        \n",
    "        # Also create a country mapping sheet for reference\n",
    "        country_mapping = pd.DataFrame([\n",
    "            {'country_id': country_id_mapping[country], 'country_code': country} \n",
    "            for country in countries\n",
    "        ])\n",
    "        country_mapping.to_excel(writer, sheet_name='Country_Mapping', index=False)\n",
    "    \n",
    "    print(f\"\\nPanel data successfully saved to {output_path}\")\n",
    "    print(f\"Data shape: {panel_data.shape[0]} observations, {panel_data.shape[1]} variables\")\n",
    "    print(f\"Time period: {panel_data['year'].min()} - {panel_data['year'].max()}\")\n",
    "    print(f\"Number of countries: {panel_data['country'].nunique()}\")\n",
    "    \n",
    "    # Display sample of the data\n",
    "    print(f\"\\nSample of the panel data:\")\n",
    "    print(panel_data.head(10))\n",
    "    \n",
    "    # Display summary statistics\n",
    "    print(f\"\\nData availability summary:\")\n",
    "    for col in panel_data.columns:\n",
    "        if col not in ['country_id', 'country', 'year']:\n",
    "            non_null_count = panel_data[col].notna().sum()\n",
    "            total_count = len(panel_data)\n",
    "            print(f\"{col}: {non_null_count}/{total_count} ({non_null_count/total_count*100:.1f}%) observations available\")\n",
    "\n",
    "else:\n",
    "    print(\"No data was successfully collected for any indicator.\")\n",
    "    # Create a dummy file\n",
    "    dummy_df = pd.DataFrame({\"Message\": [\"No data available for any indicator.\"]})\n",
    "    with pd.ExcelWriter(output_path) as writer:\n",
    "        dummy_df.to_excel(writer, sheet_name=\"No_Data\", index=False)\n",
    "\n",
    "print(f\"\\nCountries included in the analysis:\")\n",
    "for country_code in countries:\n",
    "    country_id = country_id_mapping[country_code]\n",
    "    print(f\"ID {country_id:2d}: {country_code}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c22c7af4",
   "metadata": {
    "papermill": {
     "duration": 0.007787,
     "end_time": "2025-05-30T09:59:52.839790",
     "exception": false,
     "start_time": "2025-05-30T09:59:52.832003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## fetch  8 educational and economic indicators for the OECD and other specified countries from 1998 to 2018 at once in `different` sheets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "79f18525",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:52.857415Z",
     "iopub.status.busy": "2025-05-30T09:59:52.856843Z",
     "iopub.status.idle": "2025-05-30T09:59:57.355885Z",
     "shell.execute_reply": "2025-05-30T09:59:57.354360Z"
    },
    "papermill": {
     "duration": 4.509732,
     "end_time": "2025-05-30T09:59:57.357469",
     "exception": false,
     "start_time": "2025-05-30T09:59:52.847737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wbdata in /usr/local/lib/python3.11/dist-packages (1.0.0)\r\n",
      "Requirement already satisfied: appdirs<2.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.4.4)\r\n",
      "Requirement already satisfied: backoff<3.0.0,>=2.2.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.2.1)\r\n",
      "Requirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\r\n",
      "Requirement already satisfied: dateparser<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.2.1)\r\n",
      "Requirement already satisfied: decorator<6.0.0,>=5.1.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.2.1)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\r\n",
      "Requirement already satisfied: shelved-cache<0.4.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.3.1)\r\n",
      "Requirement already satisfied: tabulate<0.9.0,>=0.8.5 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.8.10)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7.0 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2024.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2025.2)\r\n",
      "Requirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\r\n",
      "Requirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7.0->dateparser<2.0.0,>=1.2.0->wbdata) (1.17.0)\r\n",
      "Fetching data for: Educational attainment, at least Bachelor's or equivalent, population 25+, male (%) (cumulative)\n",
      "Data saved for: Educational attainment, at least Bachelor's or equivalent, population 25+, male (%) (cumulative)\n",
      "Fetching data for: Industry (including construction), value added (% of GDP)\n",
      "Data saved for: Industry (including construction), value added (% of GDP)\n",
      "Fetching data for: Foreign direct investment, net (BoP, current US$)\n",
      "Data saved for: Foreign direct investment, net (BoP, current US$)\n",
      "Fetching data for: Domestic credit provided by financial sector (% of GDP)\n",
      "Data saved for: Domestic credit provided by financial sector (% of GDP)\n",
      "Fetching data for: Trade (% of GDP)\n",
      "Data saved for: Trade (% of GDP)\n",
      "Fetching data for: Labor force with advanced education (% of total working-age population with advanced education)\n",
      "Data saved for: Labor force with advanced education (% of total working-age population with advanced education)\n",
      "Fetching data for: Labor force with basic education (% of total working-age population with basic education)\n",
      "Data saved for: Labor force with basic education (% of total working-age population with basic education)\n",
      "Fetching data for: Research and development expenditure (% of GDP)\n",
      "Data saved for: Research and development expenditure (% of GDP)\n",
      "Education and Economics indicators data saved to /kaggle/working/Education_Economics_Indicators_1998_2018.xlsx\n",
      "\n",
      "Countries included in the analysis (52 total):\n",
      " 1. AUS\n",
      " 2. AUT\n",
      " 3. BEL\n",
      " 4. CAN\n",
      " 5. CHL\n",
      " 6. COL\n",
      " 7. CRI\n",
      " 8. CZE\n",
      " 9. DNK\n",
      "10. EST\n",
      "11. FIN\n",
      "12. FRA\n",
      "13. DEU\n",
      "14. GRC\n",
      "15. HUN\n",
      "16. ISL\n",
      "17. IRL\n",
      "18. ISR\n",
      "19. ITA\n",
      "20. JPN\n",
      "21. KOR\n",
      "22. LVA\n",
      "23. LTU\n",
      "24. LUX\n",
      "25. MEX\n",
      "26. NLD\n",
      "27. NZL\n",
      "28. NOR\n",
      "29. POL\n",
      "30. PRT\n",
      "31. SVK\n",
      "32. SVN\n",
      "33. ESP\n",
      "34. SWE\n",
      "35. CHE\n",
      "36. TUR\n",
      "37. GBR\n",
      "38. USA\n",
      "39. ARG\n",
      "40. BRA\n",
      "41. BGR\n",
      "42. CHN\n",
      "43. HRV\n",
      "44. CYP\n",
      "45. IND\n",
      "46. IDN\n",
      "47. MLT\n",
      "48. PER\n",
      "49. ROU\n",
      "50. RUS\n",
      "51. SAU\n",
      "52. ZAF\n"
     ]
    }
   ],
   "source": [
    "# Install wbdata if not already installed\n",
    "!pip install wbdata\n",
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# Define countries with their ISO codes\n",
    "countries = [\n",
    "    'AUS',  # Australia\n",
    "    'AUT',  # Austria\n",
    "    'BEL',  # Belgium\n",
    "    'CAN',  # Canada\n",
    "    'CHL',  # Chile\n",
    "    'COL',  # Colombia\n",
    "    'CRI',  # Costa Rica\n",
    "    'CZE',  # Czechia\n",
    "    'DNK',  # Denmark\n",
    "    'EST',  # Estonia\n",
    "    'FIN',  # Finland\n",
    "    'FRA',  # France\n",
    "    'DEU',  # Germany\n",
    "    'GRC',  # Greece\n",
    "    'HUN',  # Hungary\n",
    "    'ISL',  # Iceland\n",
    "    'IRL',  # Ireland\n",
    "    'ISR',  # Israel\n",
    "    'ITA',  # Italy\n",
    "    'JPN',  # Japan\n",
    "    'KOR',  # Korea\n",
    "    'LVA',  # Latvia\n",
    "    'LTU',  # Lithuania\n",
    "    'LUX',  # Luxembourg\n",
    "    'MEX',  # Mexico\n",
    "    'NLD',  # Netherlands\n",
    "    'NZL',  # New Zealand\n",
    "    'NOR',  # Norway\n",
    "    'POL',  # Poland\n",
    "    'PRT',  # Portugal\n",
    "    'SVK',  # Slovak Republic\n",
    "    'SVN',  # Slovenia\n",
    "    'ESP',  # Spain\n",
    "    'SWE',  # Sweden\n",
    "    'CHE',  # Switzerland\n",
    "    'TUR',  # Türkiye\n",
    "    'GBR',  # United Kingdom\n",
    "    'USA',  # United States\n",
    "    'ARG',  # Argentina\n",
    "    'BRA',  # Brazil\n",
    "    'BGR',  # Bulgaria\n",
    "    'CHN',  # China (People's Republic of)\n",
    "    'HRV',  # Croatia\n",
    "    'CYP',  # Cyprus\n",
    "    'IND',  # India\n",
    "    'IDN',  # Indonesia\n",
    "    'MLT',  # Malta\n",
    "    'PER',  # Peru\n",
    "    'ROU',  # Romania\n",
    "    'RUS',  # Russia\n",
    "    'SAU',  # Saudi Arabia\n",
    "    'ZAF'   # South Africa\n",
    "]\n",
    "\n",
    "# Define indicators\n",
    "indicators = {\n",
    "    'SE.TER.CUAT.BA.MA.ZS': 'Educational attainment, at least Bachelor\\'s or equivalent, population 25+, male (%) (cumulative)',\n",
    "    'NV.IND.TOTL.ZS': 'Industry (including construction), value added (% of GDP)',\n",
    "    'BX.KLT.DINV.CD.WD': 'Foreign direct investment, net (BoP, current US$)',\n",
    "    'FD.AST.PRVT.GD.ZS': 'Domestic credit provided by financial sector (% of GDP)',\n",
    "    'NE.TRD.GNFS.ZS': 'Trade (% of GDP)',\n",
    "    'SL.TLF.ADVN.ZS': 'Labor force with advanced education (% of total working-age population with advanced education)',\n",
    "    'SL.TLF.BASC.ZS': 'Labor force with basic education (% of total working-age population with basic education)',\n",
    "    'GB.XPD.RSDV.GD.ZS': 'Research and development expenditure (% of GDP)'\n",
    "}\n",
    "\n",
    "# Define the start and end years\n",
    "start_date = datetime(1998, 1, 1)\n",
    "end_date = datetime(2018, 12, 31)\n",
    "\n",
    "# Define output file path\n",
    "output_path = \"/kaggle/working/Education_Economics_Indicators_1998_2018.xlsx\"\n",
    "\n",
    "# Create an Excel writer\n",
    "with pd.ExcelWriter(output_path) as writer:\n",
    "    sheet_written = False  # Flag to check if at least one sheet is written\n",
    "    \n",
    "    for indicator_code, indicator_name in indicators.items():\n",
    "        print(f\"Fetching data for: {indicator_name}\")\n",
    "        \n",
    "        try:\n",
    "            # Fetch data for the given countries and indicator\n",
    "            df = wbdata.get_dataframe(\n",
    "                {indicator_code: indicator_name}, \n",
    "                country=countries, \n",
    "                date=(start_date, end_date)\n",
    "            ).reset_index()\n",
    "            \n",
    "            # If the dataframe is empty, skip writing it\n",
    "            if df.empty:\n",
    "                print(f\"Skipping {indicator_name} (No data available).\")\n",
    "                continue\n",
    "            \n",
    "            # Convert 'date' column to datetime objects if it's not already\n",
    "            if not pd.api.types.is_datetime64_any_dtype(df['date']):\n",
    "                df['date'] = pd.to_datetime(df['date'])\n",
    "                \n",
    "            # Extract only the year\n",
    "            df['year'] = df['date'].dt.year\n",
    "            \n",
    "            # Drop the 'date' column and sort by country and year\n",
    "            df = df.drop(columns=['date']).sort_values(by=['country', 'year'])\n",
    "            \n",
    "            # Create a safe sheet name (Excel sheet names have character limits)\n",
    "            sheet_name = indicator_name[:31]  # Limit to 31 characters for Excel compatibility\n",
    "            if len(indicator_name) > 31:\n",
    "                # Create a shorter, meaningful name\n",
    "                if 'Educational attainment' in indicator_name:\n",
    "                    sheet_name = 'Bachelor_Male_Education'\n",
    "                elif 'Industry' in indicator_name:\n",
    "                    sheet_name = 'Industry_Value_Added'\n",
    "                elif 'Foreign direct investment' in indicator_name:\n",
    "                    sheet_name = 'FDI_Net'\n",
    "                elif 'Domestic credit' in indicator_name:\n",
    "                    sheet_name = 'Domestic_Credit'\n",
    "                elif 'Trade' in indicator_name:\n",
    "                    sheet_name = 'Trade_GDP'\n",
    "                elif 'advanced education' in indicator_name:\n",
    "                    sheet_name = 'Labor_Advanced_Education'\n",
    "                elif 'basic education' in indicator_name:\n",
    "                    sheet_name = 'Labor_Basic_Education'\n",
    "                elif 'Research and development' in indicator_name:\n",
    "                    sheet_name = 'RD_Expenditure'\n",
    "            \n",
    "            # Save data to a sheet\n",
    "            df.to_excel(writer, sheet_name=sheet_name, index=False)\n",
    "            sheet_written = True  # Mark that at least one sheet is written\n",
    "            print(f\"Data saved for: {indicator_name}\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"Error fetching data for {indicator_name}: {str(e)}\")\n",
    "            continue\n",
    "    \n",
    "    # If no data was written, create a dummy sheet to prevent the error\n",
    "    if not sheet_written:\n",
    "        df = pd.DataFrame({\"Message\": [\"No data available for any indicator.\"]})\n",
    "        df.to_excel(writer, sheet_name=\"No Data\", index=False)\n",
    "\n",
    "print(f\"Education and Economics indicators data saved to {output_path}\")\n",
    "\n",
    "# Optional: Display summary of countries included\n",
    "print(f\"\\nCountries included in the analysis ({len(countries)} total):\")\n",
    "for i, country_code in enumerate(countries, 1):\n",
    "    print(f\"{i:2d}. {country_code}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae4cbd52",
   "metadata": {
    "papermill": {
     "duration": 0.008274,
     "end_time": "2025-05-30T09:59:57.375078",
     "exception": false,
     "start_time": "2025-05-30T09:59:57.366804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## For get 1-52 for 21times (years)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae421fca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:57.393515Z",
     "iopub.status.busy": "2025-05-30T09:59:57.393188Z",
     "iopub.status.idle": "2025-05-30T09:59:57.405263Z",
     "shell.execute_reply": "2025-05-30T09:59:57.403515Z"
    },
    "papermill": {
     "duration": 0.023507,
     "end_time": "2025-05-30T09:59:57.407025",
     "exception": false,
     "start_time": "2025-05-30T09:59:57.383518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "4\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "6\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "8\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "9\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "10\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "11\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "12\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "13\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "14\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "15\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "16\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "17\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "18\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "19\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "20\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "21\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "22\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "23\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "24\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "25\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "26\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "27\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "28\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "29\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "30\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "31\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "32\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "33\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "34\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "35\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "36\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "37\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "38\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "39\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "40\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "41\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "42\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "43\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "44\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "45\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "46\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "47\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "48\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "49\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "50\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "51\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n",
      "52\n"
     ]
    }
   ],
   "source": [
    "for num in range(1, 53):  # From 1 to 52 inclusive\n",
    "    for _ in range(21):   # Repeat each number 21 times\n",
    "        print(num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f497ac6",
   "metadata": {
    "papermill": {
     "duration": 0.009169,
     "end_time": "2025-05-30T09:59:57.428163",
     "exception": false,
     "start_time": "2025-05-30T09:59:57.418994",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### One tap Go Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b570f124",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T09:59:57.448104Z",
     "iopub.status.busy": "2025-05-30T09:59:57.447803Z",
     "iopub.status.idle": "2025-05-30T10:00:03.287953Z",
     "shell.execute_reply": "2025-05-30T10:00:03.286969Z"
    },
    "papermill": {
     "duration": 5.851958,
     "end_time": "2025-05-30T10:00:03.289470",
     "exception": false,
     "start_time": "2025-05-30T09:59:57.437512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wbdata in /usr/local/lib/python3.11/dist-packages (1.0.0)\r\n",
      "Requirement already satisfied: appdirs<2.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.4.4)\r\n",
      "Requirement already satisfied: backoff<3.0.0,>=2.2.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.2.1)\r\n",
      "Requirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\r\n",
      "Requirement already satisfied: dateparser<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.2.1)\r\n",
      "Requirement already satisfied: decorator<6.0.0,>=5.1.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.2.1)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\r\n",
      "Requirement already satisfied: shelved-cache<0.4.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.3.1)\r\n",
      "Requirement already satisfied: tabulate<0.9.0,>=0.8.5 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.8.10)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7.0 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2024.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2025.2)\r\n",
      "Requirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\r\n",
      "Requirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7.0->dateparser<2.0.0,>=1.2.0->wbdata) (1.17.0)\r\n",
      "Energy use per capita data saved to /kaggle/working/Renewable energy consumption_2010_2019.xlsx\n"
     ]
    }
   ],
   "source": [
    "# Install wbdata if not already installed\n",
    "!pip install wbdata\n",
    "\n",
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# Define country groups\n",
    "regions = {\n",
    "    \"Western Europe\": ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL'],\n",
    "    \"Northern Europe\": ['DNK', 'EST', 'FIN', 'ISL', 'LVA', 'LTU', 'NOR', 'SWE'],\n",
    "    \"Southern Europe\": ['ALB', 'AND', 'BIH', 'HRV', 'CYP', 'GRC', 'ITA', 'MLT', 'MNE', 'MKD', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP'],\n",
    "    \"Central Europe\": ['AUT', 'CZE', 'DEU', 'HUN', 'LIE', 'POL', 'SVK', 'SVN', 'CHE'],\n",
    "    \"Southeastern Europe\": ['ALB', 'BIH', 'BGR', 'HRV', 'MNE', 'MKD', 'ROU', 'SRB', 'SVN', 'GRC']\n",
    "}\n",
    "\n",
    "# Indicator for Energy use per capita\n",
    "indicator = {'EG.FEC.RNEW.ZS': 'Renewable energy consumption (% of total final energy consumption)'}\n",
    "\n",
    "# Define the start and end years\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Define output file path for Kaggle\n",
    "output_path = \"/kaggle/working/Renewable energy consumption_2010_2019.xlsx\"\n",
    "\n",
    "# Create an Excel writer\n",
    "with pd.ExcelWriter(output_path) as writer:\n",
    "    sheet_written = False  # Flag to check if at least one sheet is written\n",
    "    for region, countries in regions.items():\n",
    "        # Fetch data for the given countries\n",
    "        df = wbdata.get_dataframe(\n",
    "            indicator, \n",
    "            country=countries, \n",
    "            date=(start_date, end_date)\n",
    "        ).reset_index()\n",
    "        \n",
    "        # If the dataframe is empty, skip writing it\n",
    "        if df.empty:\n",
    "            print(f\"Skipping {region} (No data available).\")\n",
    "            continue\n",
    "        \n",
    "        # Convert 'date' column to datetime objects if it's not already\n",
    "        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n",
    "            df['date'] = pd.to_datetime(df['date'])\n",
    "            \n",
    "        # Extract only the year\n",
    "        df['year'] = df['date'].dt.year\n",
    "        \n",
    "        # Drop the 'date' column and sort by 'year'\n",
    "        df = df.drop(columns=['date']).sort_values(by=['year'])\n",
    "        \n",
    "        # Save data to a sheet\n",
    "        df.to_excel(writer, sheet_name=region, index=False)\n",
    "        sheet_written = True  # Mark that at least one sheet is written\n",
    "\n",
    "    # If no data was written, create a dummy sheet to prevent the error\n",
    "    if not sheet_written:\n",
    "        df = pd.DataFrame({\"Message\": [\"No data available for any region.\"]})\n",
    "        df.to_excel(writer, sheet_name=\"No Data\", index=False)\n",
    "\n",
    "print(f\"Energy use per capita data saved to {output_path}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f02c68bc",
   "metadata": {
    "papermill": {
     "duration": 0.009265,
     "end_time": "2025-05-30T10:00:03.308503",
     "exception": false,
     "start_time": "2025-05-30T10:00:03.299238",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Concept 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1bbc1731",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:03.329548Z",
     "iopub.status.busy": "2025-05-30T10:00:03.328657Z",
     "iopub.status.idle": "2025-05-30T10:00:03.757828Z",
     "shell.execute_reply": "2025-05-30T10:00:03.756813Z"
    },
    "papermill": {
     "duration": 0.441626,
     "end_time": "2025-05-30T10:00:03.759602",
     "exception": false,
     "start_time": "2025-05-30T10:00:03.317976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            country  Energy use (kg of oil equivalent per capita)  year\n",
      "109     Netherlands                                   4978.869388  2010\n",
      "49           France                                   4040.439555  2010\n",
      "69          Ireland                                   3149.018492  2010\n",
      "39          Germany                                   4029.830858  2010\n",
      "79    Liechtenstein                                           NaN  2010\n",
      "..              ...                                           ...   ...\n",
      "40           France                                   3601.765708  2019\n",
      "70    Liechtenstein                                           NaN  2019\n",
      "50   United Kingdom                                   2508.231650  2019\n",
      "10          Belgium                                   4773.932614  2019\n",
      "0           Austria                                   3765.980119  2019\n",
      "\n",
      "[110 rows x 3 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL']\n",
    "\n",
    "# Indicator for Energy use (kg of oil equivalent per capita)\n",
    "indicator = {'EG.USE.PCAP.KG.OE': 'Energy use (kg of oil equivalent per capita)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Extract only the year from the 'date' column\n",
    "df['year'] = pd.to_datetime(df['date']).dt.year\n",
    "\n",
    "# Drop the 'date' column and sort by 'year'\n",
    "df = df.drop(columns=['date'])\n",
    "df = df.sort_values(by=['year'])\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "#df.to_excel('/kaggle/working/Energy_use_per_capita_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21f90cfe",
   "metadata": {
    "papermill": {
     "duration": 0.009417,
     "end_time": "2025-05-30T10:00:03.778724",
     "exception": false,
     "start_time": "2025-05-30T10:00:03.769307",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Experimental one tap code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3c54d880",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:03.799944Z",
     "iopub.status.busy": "2025-05-30T10:00:03.799109Z",
     "iopub.status.idle": "2025-05-30T10:00:09.394629Z",
     "shell.execute_reply": "2025-05-30T10:00:09.393587Z"
    },
    "papermill": {
     "duration": 5.607725,
     "end_time": "2025-05-30T10:00:09.396218",
     "exception": false,
     "start_time": "2025-05-30T10:00:03.788493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wbdata in /usr/local/lib/python3.11/dist-packages (1.0.0)\r\n",
      "Requirement already satisfied: appdirs<2.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.4.4)\r\n",
      "Requirement already satisfied: backoff<3.0.0,>=2.2.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.2.1)\r\n",
      "Requirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\r\n",
      "Requirement already satisfied: dateparser<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (1.2.1)\r\n",
      "Requirement already satisfied: decorator<6.0.0,>=5.1.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.2.1)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\r\n",
      "Requirement already satisfied: shelved-cache<0.4.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.3.1)\r\n",
      "Requirement already satisfied: tabulate<0.9.0,>=0.8.5 in /usr/local/lib/python3.11/dist-packages (from wbdata) (0.8.10)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7.0 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2024.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2025.2)\r\n",
      "Requirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\r\n",
      "Requirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7.0->dateparser<2.0.0,>=1.2.0->wbdata) (1.17.0)\r\n",
      "Energy use per capita data saved to /kaggle/working/Energy_Use_Per_Capita_2010_2019.xlsx\n"
     ]
    }
   ],
   "source": [
    "# Install wbdata if not already installed\n",
    "!pip install wbdata\n",
    "\n",
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# Define country groups\n",
    "regions = {\n",
    "    \"Western Europe\": ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL'],\n",
    "    \"Northern Europe\": ['DNK', 'EST', 'FIN', 'ISL', 'LVA', 'LTU', 'NOR', 'SWE'],\n",
    "    \"Southern Europe\": ['ALB', 'AND', 'BIH', 'HRV', 'CYP', 'GRC', 'ITA', 'MLT', 'MNE', 'MKD', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP'],\n",
    "    \"Central Europe\": ['AUT', 'CZE', 'DEU', 'HUN', 'LIE', 'POL', 'SVK', 'SVN', 'CHE'],\n",
    "    \"Southeastern Europe\": ['ALB', 'BIH', 'BGR', 'HRV', 'MNE', 'MKD', 'ROU', 'SRB', 'SVN', 'GRC']\n",
    "}\n",
    "\n",
    "# Indicator for Energy use per capita\n",
    "indicator = {'EG.USE.PCAP.KG.OE': 'Energy use (kg of oil equivalent per capita)'}\n",
    "\n",
    "# Define the start and end years\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Define output file path for Kaggle\n",
    "output_path = \"/kaggle/working/Energy_Use_Per_Capita_2010_2019.xlsx\"\n",
    "\n",
    "# Create an Excel writer\n",
    "with pd.ExcelWriter(output_path) as writer:\n",
    "    sheet_written = False  # Flag to check if at least one sheet is written\n",
    "    for region, countries in regions.items():\n",
    "        # Fetch data for the given countries\n",
    "        df = wbdata.get_dataframe(\n",
    "            indicator, \n",
    "            country=countries, \n",
    "            date=(start_date, end_date)\n",
    "        ).reset_index()\n",
    "        \n",
    "        # If the dataframe is empty, skip writing it\n",
    "        if df.empty:\n",
    "            print(f\"Skipping {region} (No data available).\")\n",
    "            continue\n",
    "        \n",
    "        # Convert 'date' column to datetime objects if it's not already\n",
    "        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n",
    "            df['date'] = pd.to_datetime(df['date'])\n",
    "            \n",
    "        # Extract only the year\n",
    "        df['year'] = df['date'].dt.year\n",
    "        \n",
    "        # Drop the 'date' column and sort by 'year'\n",
    "        df = df.drop(columns=['date']).sort_values(by=['year'])\n",
    "        \n",
    "        # Save data to a sheet\n",
    "        df.to_excel(writer, sheet_name=region, index=False)\n",
    "        sheet_written = True  # Mark that at least one sheet is written\n",
    "\n",
    "    # If no data was written, create a dummy sheet to prevent the error\n",
    "    if not sheet_written:\n",
    "        df = pd.DataFrame({\"Message\": [\"No data available for any region.\"]})\n",
    "        df.to_excel(writer, sheet_name=\"No Data\", index=False)\n",
    "\n",
    "print(f\"Energy use per capita data saved to {output_path}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49853971",
   "metadata": {
    "papermill": {
     "duration": 0.009945,
     "end_time": "2025-05-30T10:00:09.416432",
     "exception": false,
     "start_time": "2025-05-30T10:00:09.406487",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Prototype code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "10169504",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:09.438025Z",
     "iopub.status.busy": "2025-05-30T10:00:09.437108Z",
     "iopub.status.idle": "2025-05-30T10:00:10.201193Z",
     "shell.execute_reply": "2025-05-30T10:00:10.200114Z"
    },
    "papermill": {
     "duration": 0.776783,
     "end_time": "2025-05-30T10:00:10.203003",
     "exception": false,
     "start_time": "2025-05-30T10:00:09.426220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            country  Trade (% of GDP)\n",
      "date                                 \n",
      "2019-01-01  Denmark        111.891475\n",
      "2018-01-01  Denmark        108.813986\n",
      "2017-01-01  Denmark        104.215677\n",
      "2016-01-01  Denmark        101.452784\n",
      "2015-01-01  Denmark        105.130362\n",
      "...             ...               ...\n",
      "2014-01-01   Sweden         83.822647\n",
      "2013-01-01   Sweden         81.639813\n",
      "2012-01-01   Sweden         85.297671\n",
      "2011-01-01   Sweden         86.390325\n",
      "2010-01-01   Sweden         85.091049\n",
      "\n",
      "[90 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['DNK', 'EST', 'FIN', 'ISL', 'IRL', 'LVA', 'LTU', 'NOR', 'SWE']\n",
    "\n",
    "# Indicator for trade (% of GDP)\n",
    "indicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Convert the 'date' column to datetime\n",
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Set the index back to 'date' if desired\n",
    "df = df.set_index('date')\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "df.to_excel('/kaggle/working/Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41c6f985",
   "metadata": {
    "papermill": {
     "duration": 0.009686,
     "end_time": "2025-05-30T10:00:10.223438",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.213752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Code"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f810f44",
   "metadata": {
    "papermill": {
     "duration": 0.009633,
     "end_time": "2025-05-30T10:00:10.243117",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.233484",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trade openness for western european countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87bea7cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:10.264101Z",
     "iopub.status.busy": "2025-05-30T10:00:10.263802Z",
     "iopub.status.idle": "2025-05-30T10:00:10.620367Z",
     "shell.execute_reply": "2025-05-30T10:00:10.619265Z"
    },
    "papermill": {
     "duration": 0.368833,
     "end_time": "2025-05-30T10:00:10.621856",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.253023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            country  Trade (% of GDP)  year\n",
      "109     Netherlands        130.081708  2010\n",
      "49           France         56.587555  2010\n",
      "69          Ireland        189.863838  2010\n",
      "39          Germany         73.862641  2010\n",
      "79    Liechtenstein               NaN  2010\n",
      "..              ...               ...   ...\n",
      "40           France         66.428977  2019\n",
      "70    Liechtenstein               NaN  2019\n",
      "50   United Kingdom         64.665134  2019\n",
      "10          Belgium        165.465479  2019\n",
      "0           Austria        108.207285  2019\n",
      "\n",
      "[110 rows x 3 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL']\n",
    "\n",
    "# Indicator for trade (% of GDP)\n",
    "indicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Extract only the year from the 'date' column\n",
    "df['year'] = pd.to_datetime(df['date']).dt.year\n",
    "\n",
    "# Drop the 'date' column and sort by 'year'\n",
    "df = df.drop(columns=['date'])\n",
    "df = df.sort_values(by=['year'])\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "df.to_excel('/kaggle/working/F Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aef0d630",
   "metadata": {
    "papermill": {
     "duration": 0.010346,
     "end_time": "2025-05-30T10:00:10.642360",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.632014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trade openness for `Eastern european` countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0ad7a6ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:10.663682Z",
     "iopub.status.busy": "2025-05-30T10:00:10.663346Z",
     "iopub.status.idle": "2025-05-30T10:00:10.698101Z",
     "shell.execute_reply": "2025-05-30T10:00:10.697165Z"
    },
    "papermill": {
     "duration": 0.04735,
     "end_time": "2025-05-30T10:00:10.699757",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.652407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      country  Trade (% of GDP)  year\n",
      "89     Sweden         85.091049  2010\n",
      "49    Iceland         93.646398  2010\n",
      "39    Ireland        189.863838  2010\n",
      "59  Lithuania        131.626507  2010\n",
      "29    Finland         75.461209  2010\n",
      "..        ...               ...   ...\n",
      "30    Ireland        249.745766  2019\n",
      "60     Latvia        125.291632  2019\n",
      "40    Iceland         82.862746  2019\n",
      "80     Sweden         92.521083  2019\n",
      "0     Denmark        111.891475  2019\n",
      "\n",
      "[90 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['DNK', 'EST', 'FIN', 'ISL', 'IRL', 'LVA', 'LTU', 'NOR', 'SWE']\n",
    "\n",
    "# Indicator for trade (% of GDP)\n",
    "indicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Extract only the year from the 'date' column\n",
    "df['year'] = pd.to_datetime(df['date']).dt.year\n",
    "\n",
    "# Drop the 'date' column and sort by 'year'\n",
    "df = df.drop(columns=['date'])\n",
    "df = df.sort_values(by=['year'])\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "df.to_excel('/kaggle/working/F Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8d1be12",
   "metadata": {
    "papermill": {
     "duration": 0.009928,
     "end_time": "2025-05-30T10:00:10.720078",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.710150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trade openness for `Southern European` countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4da2ff16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:10.741860Z",
     "iopub.status.busy": "2025-05-30T10:00:10.741077Z",
     "iopub.status.idle": "2025-05-30T10:00:11.125583Z",
     "shell.execute_reply": "2025-05-30T10:00:11.124398Z"
    },
    "papermill": {
     "duration": 0.396989,
     "end_time": "2025-05-30T10:00:11.127160",
     "exception": false,
     "start_time": "2025-05-30T10:00:10.730171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    country  Trade (% of GDP)  year\n",
      "149                Slovenia        128.606575  2010\n",
      "29   Bosnia and Herzegovina         80.968216  2010\n",
      "59                   Greece         50.922517  2010\n",
      "49                    Spain         52.693370  2010\n",
      "129              San Marino               NaN  2010\n",
      "..                      ...               ...   ...\n",
      "90                    Malta        233.070644  2019\n",
      "70                    Italy         58.694190  2019\n",
      "80          North Macedonia        138.576232  2019\n",
      "20   Bosnia and Herzegovina         94.516128  2019\n",
      "0                   Albania         75.382160  2019\n",
      "\n",
      "[150 rows x 3 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['ALB', 'AND', 'BIH', 'HRV', 'CYP', 'GRC', 'ITA', 'MLT', 'MNE', 'MKD', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP']\n",
    "\n",
    "# Indicator for trade (% of GDP)\n",
    "indicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Extract only the year from the 'date' column\n",
    "df['year'] = pd.to_datetime(df['date']).dt.year\n",
    "\n",
    "# Drop the 'date' column and sort by 'year'\n",
    "df = df.drop(columns=['date'])\n",
    "df = df.sort_values(by=['year'])\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "df.to_excel('/kaggle/working/SE Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d307508d",
   "metadata": {
    "papermill": {
     "duration": 0.010436,
     "end_time": "2025-05-30T10:00:11.148170",
     "exception": false,
     "start_time": "2025-05-30T10:00:11.137734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trade openness for `Central Europe` countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2c8bf4ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:11.170087Z",
     "iopub.status.busy": "2025-05-30T10:00:11.169420Z",
     "iopub.status.idle": "2025-05-30T10:00:11.796488Z",
     "shell.execute_reply": "2025-05-30T10:00:11.795362Z"
    },
    "papermill": {
     "duration": 0.639752,
     "end_time": "2025-05-30T10:00:11.798156",
     "exception": false,
     "start_time": "2025-05-30T10:00:11.158404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          country  Trade (% of GDP)  year\n",
      "89       Slovenia        128.606575  2010\n",
      "49        Hungary        157.464914  2010\n",
      "39        Germany         73.862641  2010\n",
      "59  Liechtenstein               NaN  2010\n",
      "29        Czechia        126.756480  2010\n",
      "..            ...               ...   ...\n",
      "30        Germany         79.133747  2019\n",
      "60         Poland        101.581034  2019\n",
      "40        Hungary        160.751343  2019\n",
      "80       Slovenia        160.044276  2019\n",
      "0         Austria        108.207285  2019\n",
      "\n",
      "[90 rows x 3 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['AUT', 'CZE', 'DEU', 'HUN', 'LIE', 'POL', 'SVK', 'SVN', 'CHE']\n",
    "\n",
    "# Indicator for trade (% of GDP)\n",
    "indicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Extract only the year from the 'date' column\n",
    "df['year'] = pd.to_datetime(df['date']).dt.year\n",
    "\n",
    "# Drop the 'date' column and sort by 'year'\n",
    "df = df.drop(columns=['date'])\n",
    "df = df.sort_values(by=['year'])\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "df.to_excel('/kaggle/working/CE Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19c7b9fd",
   "metadata": {
    "papermill": {
     "duration": 0.010057,
     "end_time": "2025-05-30T10:00:11.818907",
     "exception": false,
     "start_time": "2025-05-30T10:00:11.808850",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trade openness for `Southeastern Europe (Balkans)` countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "48288225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T10:00:11.840629Z",
     "iopub.status.busy": "2025-05-30T10:00:11.840295Z",
     "iopub.status.idle": "2025-05-30T10:00:12.254484Z",
     "shell.execute_reply": "2025-05-30T10:00:12.253581Z"
    },
    "papermill": {
     "duration": 0.426869,
     "end_time": "2025-05-30T10:00:12.256061",
     "exception": false,
     "start_time": "2025-05-30T10:00:11.829192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             country  Trade (% of GDP)  year\n",
      "109           Kosovo         82.177480  2010\n",
      "49           Croatia         72.638657  2010\n",
      "69        Montenegro         99.780326  2010\n",
      "39            Greece         50.922517  2010\n",
      "79           Romania         69.954935  2010\n",
      "..               ...               ...   ...\n",
      "40           Croatia        101.382013  2019\n",
      "70           Romania         84.367712  2019\n",
      "50   North Macedonia        138.576232  2019\n",
      "10          Bulgaria        125.029963  2019\n",
      "0            Albania         75.382160  2019\n",
      "\n",
      "[110 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "import wbdata\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\n",
    "countries = ['ALB', 'BIH', 'BGR', 'HRV', 'XKX', 'MNE', 'MKD', 'ROU', 'SRB', 'SVN', 'GRC']\n",
    "\n",
    "# Indicator for trade (% of GDP)\n",
    "indicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n",
    "\n",
    "# Define the start and end dates\n",
    "start_date = datetime(2010, 1, 1)\n",
    "end_date = datetime(2019, 12, 31)\n",
    "\n",
    "# Fetch the data using wbdata\n",
    "df = wbdata.get_dataframe(\n",
    "    indicator, \n",
    "    country=countries, \n",
    "    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n",
    ")\n",
    "\n",
    "# Reset the index to have separate columns for 'country' and 'date'\n",
    "df = df.reset_index()\n",
    "\n",
    "# Extract only the year from the 'date' column\n",
    "df['year'] = pd.to_datetime(df['date']).dt.year\n",
    "\n",
    "# Drop the 'date' column and sort by 'year'\n",
    "df = df.drop(columns=['date'])\n",
    "df = df.sort_values(by=['year'])\n",
    "\n",
    "# Display the data\n",
    "print(df)\n",
    "\n",
    "# Save the output as an Excel file for Kaggle output\n",
    "df.to_excel('/kaggle/working/SCE Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 64.142379,
   "end_time": "2025-05-30T10:00:12.887733",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-30T09:59:08.745354",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
