{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T09:50:14.155892Z","iopub.execute_input":"2025-02-03T09:50:14.156248Z","iopub.status.idle":"2025-02-03T09:50:15.222204Z","shell.execute_reply.started":"2025-02-03T09:50:14.156212Z","shell.execute_reply":"2025-02-03T09:50:15.221235Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Install necessary module","metadata":{}},{"cell_type":"code","source":"pip install wbdata pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-22T10:57:37.708536Z","iopub.execute_input":"2025-05-22T10:57:37.708827Z","iopub.status.idle":"2025-05-22T10:57:58.856155Z","shell.execute_reply.started":"2025-05-22T10:57:37.708802Z","shell.execute_reply":"2025-05-22T10:57:58.855012Z"},"_kg_hide-input":true},"outputs":[{"name":"stdout","text":"Collecting wbdata\n  Downloading wbdata-1.0.0-py3-none-any.whl.metadata (2.6 kB)\nRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.3)\nCollecting appdirs<2.0,>=1.4 (from wbdata)\n  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\nCollecting backoff<3.0.0,>=2.2.1 (from wbdata)\n  Downloading backoff-2.2.1-py3-none-any.whl.metadata (14 kB)\nRequirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.11/dist-packages (from wbdata) (5.5.2)\nCollecting dateparser<2.0.0,>=1.2.0 (from wbdata)\n  Downloading dateparser-1.2.1-py3-none-any.whl.metadata (29 kB)\nCollecting decorator<6.0.0,>=5.1.1 (from wbdata)\n  Downloading decorator-5.2.1-py3-none-any.whl.metadata (3.9 kB)\nRequirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from wbdata) (2.32.3)\nCollecting shelved-cache<0.4.0,>=0.3.1 (from wbdata)\n  Downloading shelved_cache-0.3.1-py3-none-any.whl.metadata (4.7 kB)\nCollecting tabulate<0.9.0,>=0.8.5 (from wbdata)\n  Downloading tabulate-0.8.10-py3-none-any.whl.metadata (25 kB)\nRequirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\nRequirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\nRequirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.11/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.3.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2.4.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2.4.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.0->wbdata) (2025.4.26)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.23.2->pandas) (1.3.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.23.2->pandas) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.23.2->pandas) (2024.2.0)\nDownloading wbdata-1.0.0-py3-none-any.whl (18 kB)\nDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\nDownloading backoff-2.2.1-py3-none-any.whl (15 kB)\nDownloading dateparser-1.2.1-py3-none-any.whl (295 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.7/295.7 kB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading decorator-5.2.1-py3-none-any.whl (9.2 kB)\nDownloading shelved_cache-0.3.1-py3-none-any.whl (7.8 kB)\nDownloading tabulate-0.8.10-py3-none-any.whl (29 kB)\nInstalling collected packages: appdirs, tabulate, shelved-cache, decorator, backoff, dateparser, wbdata\n  Attempting uninstall: tabulate\n    Found existing installation: tabulate 0.9.0\n    Uninstalling tabulate-0.9.0:\n      Successfully uninstalled tabulate-0.9.0\n  Attempting uninstall: decorator\n    Found existing installation: decorator 4.4.2\n    Uninstalling decorator-4.4.2:\n      Successfully uninstalled decorator-4.4.2\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nmoviepy 1.0.3 requires decorator<5.0,>=4.0.2, but you have decorator 5.2.1 which is incompatible.\nbigframes 1.42.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\nbigframes 1.42.0 requires tabulate>=0.9, but you have tabulate 0.8.10 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed appdirs-1.4.4 backoff-2.2.1 dateparser-1.2.1 decorator-5.2.1 shelved-cache-0.3.1 tabulate-0.8.10 wbdata-1.0.0\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"## fetch  8 educational and economic indicators for the OECD and other specified countries from 1998 to 2018 at once in `one` sheets","metadata":{}},{"cell_type":"code","source":"# Install wbdata if not already installed\n!pip install wbdata\nimport wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# Define countries with their ISO codes\ncountries = [\n    'AUS',  # Australia\n    'AUT',  # Austria\n    'BEL',  # Belgium\n    'CAN',  # Canada\n    'CHL',  # Chile\n    'COL',  # Colombia\n    'CRI',  # Costa Rica\n    'CZE',  # Czechia\n    'DNK',  # Denmark\n    'EST',  # Estonia\n    'FIN',  # Finland\n    'FRA',  # France\n    'DEU',  # Germany\n    'GRC',  # Greece\n    'HUN',  # Hungary\n    'ISL',  # Iceland\n    'IRL',  # Ireland\n    'ISR',  # Israel\n    'ITA',  # Italy\n    'JPN',  # Japan\n    'KOR',  # Korea\n    'LVA',  # Latvia\n    'LTU',  # Lithuania\n    'LUX',  # Luxembourg\n    'MEX',  # Mexico\n    'NLD',  # Netherlands\n    'NZL',  # New Zealand\n    'NOR',  # Norway\n    'POL',  # Poland\n    'PRT',  # Portugal\n    'SVK',  # Slovak Republic\n    'SVN',  # Slovenia\n    'ESP',  # Spain\n    'SWE',  # Sweden\n    'CHE',  # Switzerland\n    'TUR',  # Türkiye\n    'GBR',  # United Kingdom\n    'USA',  # United States\n    'ARG',  # Argentina\n    'BRA',  # Brazil\n    'BGR',  # Bulgaria\n    'CHN',  # China (People's Republic of)\n    'HRV',  # Croatia\n    'CYP',  # Cyprus\n    'IND',  # India\n    'IDN',  # Indonesia\n    'MLT',  # Malta\n    'PER',  # Peru\n    'ROU',  # Romania\n    'RUS',  # Russia\n    'SAU',  # Saudi Arabia\n    'ZAF'   # South Africa\n]\n\n# Create country ID mapping\ncountry_id_mapping = {country: i+1 for i, country in enumerate(countries)}\n\n# Define indicators with shorter column names for easier analysis\nindicators = {\n    'SE.TER.CUAT.BA.MA.ZS': 'bachelor_male_education',\n    'NV.IND.TOTL.ZS': 'industry_value_added',\n    'BX.KLT.DINV.CD.WD': 'fdi_net',\n    'FD.AST.PRVT.GD.ZS': 'domestic_credit',\n    'NE.TRD.GNFS.ZS': 'trade_gdp',\n    'SL.TLF.ADVN.ZS': 'labor_advanced_education',\n    'SL.TLF.BASC.ZS': 'labor_basic_education',\n    'GB.XPD.RSDV.GD.ZS': 'rd_expenditure'\n}\n\n# Define the start and end years\nstart_date = datetime(1998, 1, 1)\nend_date = datetime(2018, 12, 31)\n\n# Define output file path\noutput_path = \"/kaggle/working/Panel_Data_Education_Economics_1998_2018.xlsx\"\n\nprint(\"Starting data collection...\")\n\n# Initialize an empty list to store all dataframes\nall_data = []\n\n# Fetch data for each indicator\nfor indicator_code, column_name in indicators.items():\n    print(f\"Fetching data for: {column_name}\")\n    \n    try:\n        # Fetch data for the given countries and indicator\n        df = wbdata.get_dataframe(\n            {indicator_code: column_name}, \n            country=countries, \n            date=(start_date, end_date)\n        ).reset_index()\n        \n        # If the dataframe is empty, skip this indicator\n        if df.empty:\n            print(f\"No data available for {column_name}\")\n            continue\n        \n        # Convert 'date' column to datetime objects if it's not already\n        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n            df['date'] = pd.to_datetime(df['date'])\n            \n        # Extract only the year\n        df['year'] = df['date'].dt.year\n        \n        # Drop the 'date' column\n        df = df.drop(columns=['date'])\n        \n        # Add this dataframe to our list\n        all_data.append(df)\n        print(f\"Successfully collected data for: {column_name}\")\n        \n    except Exception as e:\n        print(f\"Error fetching data for {column_name}: {str(e)}\")\n        continue\n\n# Merge all dataframes on country and year\nif all_data:\n    print(\"\\nMerging all indicators into panel data format...\")\n    \n    # Start with the first dataframe\n    panel_data = all_data[0]\n    \n    # Merge with remaining dataframes\n    for df in all_data[1:]:\n        panel_data = pd.merge(panel_data, df, on=['country', 'year'], how='outer')\n    \n    # Add country ID column\n    panel_data['country_id'] = panel_data['country'].map(country_id_mapping)\n    \n    # Reorder columns to have ID, country, year first, then all indicators\n    column_order = ['country_id', 'country', 'year'] + [col for col in panel_data.columns if col not in ['country_id', 'country', 'year']]\n    panel_data = panel_data[column_order]\n    \n    # Sort by country ID and year for proper panel data structure\n    panel_data = panel_data.sort_values(by=['country_id', 'year'])\n    \n    # Reset index\n    panel_data = panel_data.reset_index(drop=True)\n    \n    # Save to Excel\n    with pd.ExcelWriter(output_path) as writer:\n        panel_data.to_excel(writer, sheet_name='Panel_Data', index=False)\n        \n        # Also create a country mapping sheet for reference\n        country_mapping = pd.DataFrame([\n            {'country_id': country_id_mapping[country], 'country_code': country} \n            for country in countries\n        ])\n        country_mapping.to_excel(writer, sheet_name='Country_Mapping', index=False)\n    \n    print(f\"\\nPanel data successfully saved to {output_path}\")\n    print(f\"Data shape: {panel_data.shape[0]} observations, {panel_data.shape[1]} variables\")\n    print(f\"Time period: {panel_data['year'].min()} - {panel_data['year'].max()}\")\n    print(f\"Number of countries: {panel_data['country'].nunique()}\")\n    \n    # Display sample of the data\n    print(f\"\\nSample of the panel data:\")\n    print(panel_data.head(10))\n    \n    # Display summary statistics\n    print(f\"\\nData availability summary:\")\n    for col in panel_data.columns:\n        if col not in ['country_id', 'country', 'year']:\n            non_null_count = panel_data[col].notna().sum()\n            total_count = len(panel_data)\n            print(f\"{col}: {non_null_count}/{total_count} ({non_null_count/total_count*100:.1f}%) observations available\")\n\nelse:\n    print(\"No data was successfully collected for any indicator.\")\n    # Create a dummy file\n    dummy_df = pd.DataFrame({\"Message\": [\"No data available for any indicator.\"]})\n    with pd.ExcelWriter(output_path) as writer:\n        dummy_df.to_excel(writer, sheet_name=\"No_Data\", index=False)\n\nprint(f\"\\nCountries included in the analysis:\")\nfor country_code in countries:\n    country_id = country_id_mapping[country_code]\n    print(f\"ID {country_id:2d}: {country_code}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## fetch  8 educational and economic indicators for the OECD and other specified countries from 1998 to 2018 at once in `different` sheets","metadata":{}},{"cell_type":"code","source":"# Install wbdata if not already installed\n!pip install wbdata\nimport wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# Define countries with their ISO codes\ncountries = [\n    'AUS',  # Australia\n    'AUT',  # Austria\n    'BEL',  # Belgium\n    'CAN',  # Canada\n    'CHL',  # Chile\n    'COL',  # Colombia\n    'CRI',  # Costa Rica\n    'CZE',  # Czechia\n    'DNK',  # Denmark\n    'EST',  # Estonia\n    'FIN',  # Finland\n    'FRA',  # France\n    'DEU',  # Germany\n    'GRC',  # Greece\n    'HUN',  # Hungary\n    'ISL',  # Iceland\n    'IRL',  # Ireland\n    'ISR',  # Israel\n    'ITA',  # Italy\n    'JPN',  # Japan\n    'KOR',  # Korea\n    'LVA',  # Latvia\n    'LTU',  # Lithuania\n    'LUX',  # Luxembourg\n    'MEX',  # Mexico\n    'NLD',  # Netherlands\n    'NZL',  # New Zealand\n    'NOR',  # Norway\n    'POL',  # Poland\n    'PRT',  # Portugal\n    'SVK',  # Slovak Republic\n    'SVN',  # Slovenia\n    'ESP',  # Spain\n    'SWE',  # Sweden\n    'CHE',  # Switzerland\n    'TUR',  # Türkiye\n    'GBR',  # United Kingdom\n    'USA',  # United States\n    'ARG',  # Argentina\n    'BRA',  # Brazil\n    'BGR',  # Bulgaria\n    'CHN',  # China (People's Republic of)\n    'HRV',  # Croatia\n    'CYP',  # Cyprus\n    'IND',  # India\n    'IDN',  # Indonesia\n    'MLT',  # Malta\n    'PER',  # Peru\n    'ROU',  # Romania\n    'RUS',  # Russia\n    'SAU',  # Saudi Arabia\n    'ZAF'   # South Africa\n]\n\n# Define indicators\nindicators = {\n    'SE.TER.CUAT.BA.MA.ZS': 'Educational attainment, at least Bachelor\\'s or equivalent, population 25+, male (%) (cumulative)',\n    'NV.IND.TOTL.ZS': 'Industry (including construction), value added (% of GDP)',\n    'BX.KLT.DINV.CD.WD': 'Foreign direct investment, net (BoP, current US$)',\n    'FD.AST.PRVT.GD.ZS': 'Domestic credit provided by financial sector (% of GDP)',\n    'NE.TRD.GNFS.ZS': 'Trade (% of GDP)',\n    'SL.TLF.ADVN.ZS': 'Labor force with advanced education (% of total working-age population with advanced education)',\n    'SL.TLF.BASC.ZS': 'Labor force with basic education (% of total working-age population with basic education)',\n    'GB.XPD.RSDV.GD.ZS': 'Research and development expenditure (% of GDP)'\n}\n\n# Define the start and end years\nstart_date = datetime(1998, 1, 1)\nend_date = datetime(2018, 12, 31)\n\n# Define output file path\noutput_path = \"/kaggle/working/Education_Economics_Indicators_1998_2018.xlsx\"\n\n# Create an Excel writer\nwith pd.ExcelWriter(output_path) as writer:\n    sheet_written = False  # Flag to check if at least one sheet is written\n    \n    for indicator_code, indicator_name in indicators.items():\n        print(f\"Fetching data for: {indicator_name}\")\n        \n        try:\n            # Fetch data for the given countries and indicator\n            df = wbdata.get_dataframe(\n                {indicator_code: indicator_name}, \n                country=countries, \n                date=(start_date, end_date)\n            ).reset_index()\n            \n            # If the dataframe is empty, skip writing it\n            if df.empty:\n                print(f\"Skipping {indicator_name} (No data available).\")\n                continue\n            \n            # Convert 'date' column to datetime objects if it's not already\n            if not pd.api.types.is_datetime64_any_dtype(df['date']):\n                df['date'] = pd.to_datetime(df['date'])\n                \n            # Extract only the year\n            df['year'] = df['date'].dt.year\n            \n            # Drop the 'date' column and sort by country and year\n            df = df.drop(columns=['date']).sort_values(by=['country', 'year'])\n            \n            # Create a safe sheet name (Excel sheet names have character limits)\n            sheet_name = indicator_name[:31]  # Limit to 31 characters for Excel compatibility\n            if len(indicator_name) > 31:\n                # Create a shorter, meaningful name\n                if 'Educational attainment' in indicator_name:\n                    sheet_name = 'Bachelor_Male_Education'\n                elif 'Industry' in indicator_name:\n                    sheet_name = 'Industry_Value_Added'\n                elif 'Foreign direct investment' in indicator_name:\n                    sheet_name = 'FDI_Net'\n                elif 'Domestic credit' in indicator_name:\n                    sheet_name = 'Domestic_Credit'\n                elif 'Trade' in indicator_name:\n                    sheet_name = 'Trade_GDP'\n                elif 'advanced education' in indicator_name:\n                    sheet_name = 'Labor_Advanced_Education'\n                elif 'basic education' in indicator_name:\n                    sheet_name = 'Labor_Basic_Education'\n                elif 'Research and development' in indicator_name:\n                    sheet_name = 'RD_Expenditure'\n            \n            # Save data to a sheet\n            df.to_excel(writer, sheet_name=sheet_name, index=False)\n            sheet_written = True  # Mark that at least one sheet is written\n            print(f\"Data saved for: {indicator_name}\")\n            \n        except Exception as e:\n            print(f\"Error fetching data for {indicator_name}: {str(e)}\")\n            continue\n    \n    # If no data was written, create a dummy sheet to prevent the error\n    if not sheet_written:\n        df = pd.DataFrame({\"Message\": [\"No data available for any indicator.\"]})\n        df.to_excel(writer, sheet_name=\"No Data\", index=False)\n\nprint(f\"Education and Economics indicators data saved to {output_path}\")\n\n# Optional: Display summary of countries included\nprint(f\"\\nCountries included in the analysis ({len(countries)} total):\")\nfor i, country_code in enumerate(countries, 1):\n    print(f\"{i:2d}. {country_code}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-22T10:58:04.809934Z","iopub.execute_input":"2025-05-22T10:58:04.810285Z","iopub.status.idle":"2025-05-22T10:58:16.601747Z","shell.execute_reply.started":"2025-05-22T10:58:04.810254Z","shell.execute_reply":"2025-05-22T10:58:16.600713Z"}},"outputs":[{"name":"stdout","text":"=== WDI Data Extraction for OECD+ Countries ===\nPattern: Following Southern WDI transformed structure\nTime period: 1998-2018\nCountries: OECD+ extended list\n==================================================\nStarting data extraction...\nIndicators: 8\nCountries: 52\nTime period: 1998-2018\n\nFetching data from World Bank API...\nRaw data shape: (1092, 8)\nFinal data shape: (1092, 11)\nCountries in final dataset: [nan]\nYears in final dataset: [1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]\n\n=== SAMPLE DATA (First 10 rows) ===\n   ID country  year  \\\n0   1     NaN  1998   \n1   2     NaN  1998   \n2   3     NaN  1998   \n3   4     NaN  1998   \n4   5     NaN  1998   \n5   6     NaN  1998   \n6   7     NaN  1998   \n7   8     NaN  1998   \n8   9     NaN  1998   \n9  10     NaN  1998   \n\n   Educational_attainment_at_least_Bachelors_or_equivalent_population_25+_male_pct_cumulative  \\\n0                                                NaN                                            \n1                                                NaN                                            \n2                                                NaN                                            \n3                                                NaN                                            \n4                                                NaN                                            \n5                                                NaN                                            \n6                                                NaN                                            \n7                                                NaN                                            \n8                                                NaN                                            \n9                                                NaN                                            \n\n   Industry_including_construction_value_added_pct_of_GDP  \\\n0                                          26.712136        \n1                                          25.360804        \n2                                          28.834967        \n3                                          25.570685        \n4                                          21.289195        \n5                                          22.118790        \n6                                          26.833869        \n7                                          26.649005        \n8                                          27.329720        \n9                                          45.797636        \n\n   Foreign_direct_investment_net_BoP_current_US$  \\\n0                                   7.290657e+09   \n1                                   7.597611e+09   \n2                                   4.571856e+09   \n3                                   2.269050e+10   \n4                                   5.373173e+08   \n5                                   2.885561e+10   \n6                                   2.497921e+10   \n7                                   1.134553e+10   \n8                                   4.627818e+09   \n9                                   4.564400e+10   \n\n   Domestic_credit_provided_by_financial_sector_pct_of_GDP  Trade_pct_of_GDP  \\\n0                                          32.502844               23.350028   \n1                                                NaN               39.992702   \n2                                                NaN               77.349522   \n3                                                NaN              124.709123   \n4                                                NaN               77.045203   \n5                                                NaN               16.438585   \n6                                         115.546369               78.081185   \n7                                                NaN               88.215617   \n8                                                NaN               53.836179   \n9                                                NaN               32.424140   \n\n   Labor_force_with_advanced_education_pct_of_total_working_age_population_with_advanced_education  \\\n0                                                NaN                                                 \n1                                                NaN                                                 \n2                                             81.405                                                 \n3                                             80.253                                                 \n4                                                NaN                                                 \n5                                             85.755                                                 \n6                                             78.794                                                 \n7                                             83.923                                                 \n8                                             87.390                                                 \n9                                                NaN                                                 \n\n   Labor_force_with_basic_education_pct_of_total_working_age_population_with_basic_education  \\\n0                                                NaN                                           \n1                                                NaN                                           \n2                                             38.362                                           \n3                                             32.951                                           \n4                                                NaN                                           \n5                                             65.972                                           \n6                                             50.729                                           \n7                                             51.240                                           \n8                                             48.482                                           \n9                                                NaN                                           \n\n   Research_and_development_expenditure_pct_of_GDP  \n0                                          0.41131  \n1                                          1.51351  \n2                                          1.73155  \n3                                          1.83825  \n4                                          0.48223  \n5                                              NaN  \n6                                          1.71051  \n7                                              NaN  \n8                                              NaN  \n9                                          0.64689  \n\n=== SAMPLE DATA (Last 5 rows) ===\n        ID country  year  \\\n1087  1088     NaN  2018   \n1088  1089     NaN  2018   \n1089  1090     NaN  2018   \n1090  1091     NaN  2018   \n1091  1092     NaN  2018   \n\n      Educational_attainment_at_least_Bachelors_or_equivalent_population_25+_male_pct_cumulative  \\\n1087                                          17.956659                                            \n1088                                          25.779167                                            \n1089                                          14.323991                                            \n1090                                          34.639999                                            \n1091                                          10.679364                                            \n\n      Industry_including_construction_value_added_pct_of_GDP  \\\n1087                                          28.071873        \n1088                                          22.185116        \n1089                                          29.438598        \n1090                                          18.519546        \n1091                                          23.537061        \n\n      Foreign_direct_investment_net_BoP_current_US$  \\\n1087                                   1.538138e+09   \n1088                                  -7.141534e+08   \n1089                                   1.245000e+10   \n1090                                   2.147150e+11   \n1091                                   5.569462e+09   \n\n      Domestic_credit_provided_by_financial_sector_pct_of_GDP  \\\n1087                                                NaN         \n1088                                                NaN         \n1089                                          82.213637         \n1090                                         231.896712         \n1091                                         145.581293         \n\n      Trade_pct_of_GDP  \\\n1087        162.613494   \n1088         90.129696   \n1089         62.614219   \n1090         27.445359   \n1091         54.485545   \n\n      Labor_force_with_advanced_education_pct_of_total_working_age_population_with_advanced_education  \\\n1087                                             80.063                                                 \n1088                                             83.571                                                 \n1089                                             79.316                                                 \n1090                                             73.175                                                 \n1091                                             82.879                                                 \n\n      Labor_force_with_basic_education_pct_of_total_working_age_population_with_basic_education  \\\n1087                                             27.539                                           \n1088                                             49.263                                           \n1089                                             51.094                                           \n1090                                             41.989                                           \n1091                                             47.442                                           \n\n      Research_and_development_expenditure_pct_of_GDP  \n1087                                          1.94593  \n1088                                          3.32106  \n1089                                          1.27093  \n1090                                          2.99045  \n1091                                          0.68586  \n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"name":"stdout","text":"\nData successfully exported to: OECD_Plus_WDI_transformed.xlsx\n\n=== EXPORT SUMMARY ===\nTotal rows: 1092 (excluding header)\nTotal columns: 11\nCountries: 1\nYears: 1998 - 2018\n\n=== DATA COMPLETENESS ===\nEducational_attainment_at_least_Bachelors_or_equivalent_population_25+_male_pct_cumulative: 34.5% complete\nIndustry_including_construction_value_added_pct_of_GDP: 100.0% complete\nForeign_direct_investment_net_BoP_current_US$: 99.6% complete\nDomestic_credit_provided_by_financial_sector_pct_of_GDP: 20.1% complete\nTrade_pct_of_GDP: 100.0% complete\nLabor_force_with_advanced_education_pct_of_total_working_age_population_with_advanced_education: 84.2% complete\nLabor_force_with_basic_education_pct_of_total_working_age_population_with_basic_education: 84.5% complete\nResearch_and_development_expenditure_pct_of_GDP: 90.3% complete\n\n=== STRUCTURE VERIFICATION ===\nColumn structure matches Southern WDI pattern:\n1. ID - Sequential identifier ✓\n2. country - Country name ✓\n3. year - Year ✓\n4-11. WDI Indicators (8 indicators) ✓\nExpected vs Actual columns: 11 vs 11\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"## For get 1-52 for 21times (years)","metadata":{}},{"cell_type":"code","source":"for num in range(1, 53):  # From 1 to 52 inclusive\n    for _ in range(21):   # Repeat each number 21 times\n        print(num)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### One tap Go Code","metadata":{}},{"cell_type":"code","source":"# Install wbdata if not already installed\n!pip install wbdata\n\nimport wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# Define country groups\nregions = {\n    \"Western Europe\": ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL'],\n    \"Northern Europe\": ['DNK', 'EST', 'FIN', 'ISL', 'LVA', 'LTU', 'NOR', 'SWE'],\n    \"Southern Europe\": ['ALB', 'AND', 'BIH', 'HRV', 'CYP', 'GRC', 'ITA', 'MLT', 'MNE', 'MKD', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP'],\n    \"Central Europe\": ['AUT', 'CZE', 'DEU', 'HUN', 'LIE', 'POL', 'SVK', 'SVN', 'CHE'],\n    \"Southeastern Europe\": ['ALB', 'BIH', 'BGR', 'HRV', 'MNE', 'MKD', 'ROU', 'SRB', 'SVN', 'GRC']\n}\n\n# Indicator for Energy use per capita\nindicator = {'EG.FEC.RNEW.ZS': 'Renewable energy consumption (% of total final energy consumption)'}\n\n# Define the start and end years\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Define output file path for Kaggle\noutput_path = \"/kaggle/working/Renewable energy consumption_2010_2019.xlsx\"\n\n# Create an Excel writer\nwith pd.ExcelWriter(output_path) as writer:\n    sheet_written = False  # Flag to check if at least one sheet is written\n    for region, countries in regions.items():\n        # Fetch data for the given countries\n        df = wbdata.get_dataframe(\n            indicator, \n            country=countries, \n            date=(start_date, end_date)\n        ).reset_index()\n        \n        # If the dataframe is empty, skip writing it\n        if df.empty:\n            print(f\"Skipping {region} (No data available).\")\n            continue\n        \n        # Convert 'date' column to datetime objects if it's not already\n        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n            df['date'] = pd.to_datetime(df['date'])\n            \n        # Extract only the year\n        df['year'] = df['date'].dt.year\n        \n        # Drop the 'date' column and sort by 'year'\n        df = df.drop(columns=['date']).sort_values(by=['year'])\n        \n        # Save data to a sheet\n        df.to_excel(writer, sheet_name=region, index=False)\n        sheet_written = True  # Mark that at least one sheet is written\n\n    # If no data was written, create a dummy sheet to prevent the error\n    if not sheet_written:\n        df = pd.DataFrame({\"Message\": [\"No data available for any region.\"]})\n        df.to_excel(writer, sheet_name=\"No Data\", index=False)\n\nprint(f\"Energy use per capita data saved to {output_path}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-09T08:39:30.935435Z","iopub.execute_input":"2025-02-09T08:39:30.935781Z","iopub.status.idle":"2025-02-09T08:40:05.664957Z","shell.execute_reply.started":"2025-02-09T08:39:30.935755Z","shell.execute_reply":"2025-02-09T08:40:05.664041Z"}},"outputs":[{"name":"stdout","text":"Collecting wbdata\n  Downloading wbdata-1.0.0-py3-none-any.whl.metadata (2.6 kB)\nCollecting appdirs<2.0,>=1.4 (from wbdata)\n  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\nCollecting backoff<3.0.0,>=2.2.1 (from wbdata)\n  Downloading backoff-2.2.1-py3-none-any.whl.metadata (14 kB)\nRequirement already satisfied: cachetools<6.0.0,>=5.3.2 in /usr/local/lib/python3.10/dist-packages (from wbdata) (5.5.0)\nCollecting dateparser<2.0.0,>=1.2.0 (from wbdata)\n  Downloading dateparser-1.2.1-py3-none-any.whl.metadata (29 kB)\nCollecting decorator<6.0.0,>=5.1.1 (from wbdata)\n  Downloading decorator-5.1.1-py3-none-any.whl.metadata (4.0 kB)\nRequirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from wbdata) (2.32.3)\nCollecting shelved-cache<0.4.0,>=0.3.1 (from wbdata)\n  Downloading shelved_cache-0.3.1-py3-none-any.whl.metadata (4.7 kB)\nCollecting tabulate<0.9.0,>=0.8.5 (from wbdata)\n  Downloading tabulate-0.8.10-py3-none-any.whl.metadata (25 kB)\nRequirement already satisfied: python-dateutil>=2.7.0 in /usr/local/lib/python3.10/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2.8.2)\nRequirement already satisfied: pytz>=2024.2 in /usr/local/lib/python3.10/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.2)\nRequirement already satisfied: regex!=2019.02.19,!=2021.8.27,>=2015.06.24 in /usr/local/lib/python3.10/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (2024.11.6)\nRequirement already satisfied: tzlocal>=0.2 in /usr/local/lib/python3.10/dist-packages (from dateparser<2.0.0,>=1.2.0->wbdata) (5.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->wbdata) (3.4.0)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->wbdata) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->wbdata) (2.2.3)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->wbdata) (2024.12.14)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7.0->dateparser<2.0.0,>=1.2.0->wbdata) (1.17.0)\nDownloading wbdata-1.0.0-py3-none-any.whl (18 kB)\nDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\nDownloading backoff-2.2.1-py3-none-any.whl (15 kB)\nDownloading dateparser-1.2.1-py3-none-any.whl (295 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.7/295.7 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mta \u001b[36m0:00:01\u001b[0m\n\u001b[?25hDownloading decorator-5.1.1-py3-none-any.whl (9.1 kB)\nDownloading shelved_cache-0.3.1-py3-none-any.whl (7.8 kB)\nDownloading tabulate-0.8.10-py3-none-any.whl (29 kB)\nInstalling collected packages: appdirs, tabulate, shelved-cache, decorator, backoff, dateparser, wbdata\n  Attempting uninstall: tabulate\n    Found existing installation: tabulate 0.9.0\n    Uninstalling tabulate-0.9.0:\n      Successfully uninstalled tabulate-0.9.0\n  Attempting uninstall: decorator\n    Found existing installation: decorator 4.4.2\n    Uninstalling decorator-4.4.2:\n      Successfully uninstalled decorator-4.4.2\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nbigframes 1.29.0 requires tabulate>=0.9, but you have tabulate 0.8.10 which is incompatible.\ngcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.9.0 which is incompatible.\nmoviepy 1.0.3 requires decorator<5.0,>=4.0.2, but you have decorator 5.1.1 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed appdirs-1.4.4 backoff-2.2.1 dateparser-1.2.1 decorator-5.1.1 shelved-cache-0.3.1 tabulate-0.8.10 wbdata-1.0.0\nEnergy use per capita data saved to /kaggle/working/Renewable energy consumption_2010_2019.xlsx\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"### Concept 1","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL']\n\n# Indicator for Energy use (kg of oil equivalent per capita)\nindicator = {'EG.USE.PCAP.KG.OE': 'Energy use (kg of oil equivalent per capita)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Extract only the year from the 'date' column\ndf['year'] = pd.to_datetime(df['date']).dt.year\n\n# Drop the 'date' column and sort by 'year'\ndf = df.drop(columns=['date'])\ndf = df.sort_values(by=['year'])\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\n#df.to_excel('/kaggle/working/Energy_use_per_capita_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T09:51:01.767001Z","iopub.execute_input":"2025-02-03T09:51:01.767407Z","iopub.status.idle":"2025-02-03T09:51:02.840047Z","shell.execute_reply.started":"2025-02-03T09:51:01.767375Z","shell.execute_reply":"2025-02-03T09:51:02.838988Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Experimental one tap code","metadata":{}},{"cell_type":"code","source":"# Install wbdata if not already installed\n!pip install wbdata\n\nimport wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# Define country groups\nregions = {\n    \"Western Europe\": ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL'],\n    \"Northern Europe\": ['DNK', 'EST', 'FIN', 'ISL', 'LVA', 'LTU', 'NOR', 'SWE'],\n    \"Southern Europe\": ['ALB', 'AND', 'BIH', 'HRV', 'CYP', 'GRC', 'ITA', 'MLT', 'MNE', 'MKD', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP'],\n    \"Central Europe\": ['AUT', 'CZE', 'DEU', 'HUN', 'LIE', 'POL', 'SVK', 'SVN', 'CHE'],\n    \"Southeastern Europe\": ['ALB', 'BIH', 'BGR', 'HRV', 'MNE', 'MKD', 'ROU', 'SRB', 'SVN', 'GRC']\n}\n\n# Indicator for Energy use per capita\nindicator = {'EG.USE.PCAP.KG.OE': 'Energy use (kg of oil equivalent per capita)'}\n\n# Define the start and end years\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Define output file path for Kaggle\noutput_path = \"/kaggle/working/Energy_Use_Per_Capita_2010_2019.xlsx\"\n\n# Create an Excel writer\nwith pd.ExcelWriter(output_path) as writer:\n    sheet_written = False  # Flag to check if at least one sheet is written\n    for region, countries in regions.items():\n        # Fetch data for the given countries\n        df = wbdata.get_dataframe(\n            indicator, \n            country=countries, \n            date=(start_date, end_date)\n        ).reset_index()\n        \n        # If the dataframe is empty, skip writing it\n        if df.empty:\n            print(f\"Skipping {region} (No data available).\")\n            continue\n        \n        # Convert 'date' column to datetime objects if it's not already\n        if not pd.api.types.is_datetime64_any_dtype(df['date']):\n            df['date'] = pd.to_datetime(df['date'])\n            \n        # Extract only the year\n        df['year'] = df['date'].dt.year\n        \n        # Drop the 'date' column and sort by 'year'\n        df = df.drop(columns=['date']).sort_values(by=['year'])\n        \n        # Save data to a sheet\n        df.to_excel(writer, sheet_name=region, index=False)\n        sheet_written = True  # Mark that at least one sheet is written\n\n    # If no data was written, create a dummy sheet to prevent the error\n    if not sheet_written:\n        df = pd.DataFrame({\"Message\": [\"No data available for any region.\"]})\n        df.to_excel(writer, sheet_name=\"No Data\", index=False)\n\nprint(f\"Energy use per capita data saved to {output_path}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T10:17:14.424188Z","iopub.execute_input":"2025-02-03T10:17:14.424601Z","iopub.status.idle":"2025-02-03T10:17:18.515865Z","shell.execute_reply.started":"2025-02-03T10:17:14.424570Z","shell.execute_reply":"2025-02-03T10:17:18.514875Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Prototype code","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['DNK', 'EST', 'FIN', 'ISL', 'IRL', 'LVA', 'LTU', 'NOR', 'SWE']\n\n# Indicator for trade (% of GDP)\nindicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Convert the 'date' column to datetime\ndf['date'] = pd.to_datetime(df['date'])\n\n# Set the index back to 'date' if desired\ndf = df.set_index('date')\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\ndf.to_excel('/kaggle/working/Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-01T10:09:38.756964Z","iopub.execute_input":"2025-02-01T10:09:38.757436Z","iopub.status.idle":"2025-02-01T10:09:39.789813Z","shell.execute_reply.started":"2025-02-01T10:09:38.757396Z","shell.execute_reply":"2025-02-01T10:09:39.788339Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Final Code","metadata":{}},{"cell_type":"markdown","source":"### Trade openness for western european countries","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['AUT', 'BEL', 'FRA', 'DEU', 'LIE', 'LUX', 'MCO', 'NLD', 'CHE', 'GBR', 'IRL']\n\n# Indicator for trade (% of GDP)\nindicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Extract only the year from the 'date' column\ndf['year'] = pd.to_datetime(df['date']).dt.year\n\n# Drop the 'date' column and sort by 'year'\ndf = df.drop(columns=['date'])\ndf = df.sort_values(by=['year'])\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\ndf.to_excel('/kaggle/working/F Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-02T13:24:50.681971Z","iopub.execute_input":"2025-02-02T13:24:50.682437Z","iopub.status.idle":"2025-02-02T13:24:51.009235Z","shell.execute_reply.started":"2025-02-02T13:24:50.682405Z","shell.execute_reply":"2025-02-02T13:24:51.008164Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Trade openness for `Eastern european` countries","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['DNK', 'EST', 'FIN', 'ISL', 'IRL', 'LVA', 'LTU', 'NOR', 'SWE']\n\n# Indicator for trade (% of GDP)\nindicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Extract only the year from the 'date' column\ndf['year'] = pd.to_datetime(df['date']).dt.year\n\n# Drop the 'date' column and sort by 'year'\ndf = df.drop(columns=['date'])\ndf = df.sort_values(by=['year'])\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\ndf.to_excel('/kaggle/working/F Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-01T10:24:47.166948Z","iopub.execute_input":"2025-02-01T10:24:47.167366Z","iopub.status.idle":"2025-02-01T10:24:47.210567Z","shell.execute_reply.started":"2025-02-01T10:24:47.167327Z","shell.execute_reply":"2025-02-01T10:24:47.209388Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Trade openness for `Southern European` countries","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['ALB', 'AND', 'BIH', 'HRV', 'CYP', 'GRC', 'ITA', 'MLT', 'MNE', 'MKD', 'PRT', 'SMR', 'SRB', 'SVN', 'ESP']\n\n# Indicator for trade (% of GDP)\nindicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Extract only the year from the 'date' column\ndf['year'] = pd.to_datetime(df['date']).dt.year\n\n# Drop the 'date' column and sort by 'year'\ndf = df.drop(columns=['date'])\ndf = df.sort_values(by=['year'])\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\ndf.to_excel('/kaggle/working/SE Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-01T11:09:35.435411Z","iopub.execute_input":"2025-02-01T11:09:35.435791Z","iopub.status.idle":"2025-02-01T11:09:35.927514Z","shell.execute_reply.started":"2025-02-01T11:09:35.435759Z","shell.execute_reply":"2025-02-01T11:09:35.926570Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Trade openness for `Central Europe` countries","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['AUT', 'CZE', 'DEU', 'HUN', 'LIE', 'POL', 'SVK', 'SVN', 'CHE']\n\n# Indicator for trade (% of GDP)\nindicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Extract only the year from the 'date' column\ndf['year'] = pd.to_datetime(df['date']).dt.year\n\n# Drop the 'date' column and sort by 'year'\ndf = df.drop(columns=['date'])\ndf = df.sort_values(by=['year'])\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\ndf.to_excel('/kaggle/working/CE Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-01T11:13:59.612818Z","iopub.execute_input":"2025-02-01T11:13:59.613157Z","iopub.status.idle":"2025-02-01T11:13:59.655096Z","shell.execute_reply.started":"2025-02-01T11:13:59.613130Z","shell.execute_reply":"2025-02-01T11:13:59.654094Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Trade openness for `Southeastern Europe (Balkans)` countries","metadata":{}},{"cell_type":"code","source":"import wbdata\nimport pandas as pd\nfrom datetime import datetime\n\n# List of countries to fetch data for (using ISO 3166-1 alpha-3 country codes)\ncountries = ['ALB', 'BIH', 'BGR', 'HRV', 'XKX', 'MNE', 'MKD', 'ROU', 'SRB', 'SVN', 'GRC']\n\n# Indicator for trade (% of GDP)\nindicator = {'NE.TRD.GNFS.ZS': 'Trade (% of GDP)'}\n\n# Define the start and end dates\nstart_date = datetime(2010, 1, 1)\nend_date = datetime(2019, 12, 31)\n\n# Fetch the data using wbdata\ndf = wbdata.get_dataframe(\n    indicator, \n    country=countries, \n    date=(start_date, end_date)  # Use 'date' instead of 'data_date'\n)\n\n# Reset the index to have separate columns for 'country' and 'date'\ndf = df.reset_index()\n\n# Extract only the year from the 'date' column\ndf['year'] = pd.to_datetime(df['date']).dt.year\n\n# Drop the 'date' column and sort by 'year'\ndf = df.drop(columns=['date'])\ndf = df.sort_values(by=['year'])\n\n# Display the data\nprint(df)\n\n# Save the output as an Excel file for Kaggle output\ndf.to_excel('/kaggle/working/SCE Trade_percent_of_GDP_2010_2019.xlsx')  # Save to Kaggle output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-01T11:22:52.949060Z","iopub.execute_input":"2025-02-01T11:22:52.949437Z","iopub.status.idle":"2025-02-01T11:22:53.365763Z","shell.execute_reply.started":"2025-02-01T11:22:52.949404Z","shell.execute_reply":"2025-02-01T11:22:53.364788Z"}},"outputs":[],"execution_count":null}]}