{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10203492,"sourceType":"datasetVersion","datasetId":6305519}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-15T05:00:12.869526Z","iopub.execute_input":"2024-12-15T05:00:12.870517Z","iopub.status.idle":"2024-12-15T05:00:12.896971Z","shell.execute_reply.started":"2024-12-15T05:00:12.870477Z","shell.execute_reply":"2024-12-15T05:00:12.895944Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/cp-references/for reference.docx\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"## Exmple from strings","metadata":{}},{"cell_type":"code","source":"import re\n\n# Sample input text\ntext = '''Kamalahmadi, M., Shekarian, M., & Mellat Parast, M. (2021). The impact of flexibility and redundancy on improving supply chain resilience to disruptions. International Journal of Production Research, 60(6), 1–29.\nKang, H., Jung, S.-Y., & Lee, H. (2020). The impact of Green Credit Policy on manufacturers’ efforts to reduce suppliers’ pollution. Journal of Cleaner Production, 248, 119271. https://doi.org/10.1016/j.jclepro.2019.119271\nKassa, A., Kitaw, D., Stache, U., Beshah, B., & Degefu, G. (2023). Artificial intelligence techniques for enhancing supply chain resilience: A systematic literature review, holistic framework, and future research. Computers & Industrial Engineering, 186, 109714. https://doi.org/10.1016/j.cie.2023.109714'''\n\n# Regular expression to match DOI links\ndoi_pattern = r'https://doi\\.org/[^\\s]+'\n\n# Find all occurrences of DOI\ndoi_links = re.findall(doi_pattern, text)\n\n# Print the extracted DOIs\nfor doi in doi_links:\n    print(doi)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-15T05:00:12.899055Z","iopub.execute_input":"2024-12-15T05:00:12.899497Z","iopub.status.idle":"2024-12-15T05:00:12.907000Z","shell.execute_reply.started":"2024-12-15T05:00:12.899448Z","shell.execute_reply":"2024-12-15T05:00:12.905807Z"}},"outputs":[{"name":"stdout","text":"https://doi.org/10.1016/j.jclepro.2019.119271\nhttps://doi.org/10.1016/j.cie.2023.109714\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"!pip install python-docx\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-15T05:00:12.914176Z","iopub.execute_input":"2024-12-15T05:00:12.914534Z","iopub.status.idle":"2024-12-15T05:00:22.799756Z","shell.execute_reply.started":"2024-12-15T05:00:12.914502Z","shell.execute_reply":"2024-12-15T05:00:22.798395Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: python-docx in /opt/conda/lib/python3.10/site-packages (1.1.2)\nRequirement already satisfied: lxml>=3.1.0 in /opt/conda/lib/python3.10/site-packages (from python-docx) (5.3.0)\nRequirement already satisfied: typing-extensions>=4.9.0 in /opt/conda/lib/python3.10/site-packages (from python-docx) (4.12.2)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"from docx import Document","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-15T05:00:22.802015Z","iopub.execute_input":"2024-12-15T05:00:22.802421Z","iopub.status.idle":"2024-12-15T05:00:22.908178Z","shell.execute_reply.started":"2024-12-15T05:00:22.802385Z","shell.execute_reply":"2024-12-15T05:00:22.907114Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"import re\nfrom docx import Document\n\n# Load the document\ndoc_path = \"/kaggle/input/cp-references/for reference.docx\"  \ndoc = Document(doc_path)\n\n# Extract all text from the document\ndoc_text = \"\"\nfor para in doc.paragraphs:\n    doc_text += para.text + \"\\n\"\n\n# Regular expression to find DOI links\ndoi_pattern = r\"https://doi\\.org/\\S+\"\n\n# Find all DOI links\ndoi_links = re.findall(doi_pattern, doc_text)\n\n# Save extracted DOIs to a file\noutput_path = \"/kaggle/working/extracted_dois.txt\"\nwith open(output_path, \"w\") as file:\n    for doi in doi_links:\n        file.write(doi + \"\\n\")\n\nprint(f\"Extracted {len(doi_links)} DOI links. Saved to {output_path}.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-15T05:00:22.909480Z","iopub.execute_input":"2024-12-15T05:00:22.910058Z","iopub.status.idle":"2024-12-15T05:00:22.972093Z","shell.execute_reply.started":"2024-12-15T05:00:22.910025Z","shell.execute_reply":"2024-12-15T05:00:22.970785Z"}},"outputs":[{"name":"stdout","text":"Extracted 89 DOI links. Saved to /kaggle/working/extracted_dois.txt.\n","output_type":"stream"}],"execution_count":11}]}